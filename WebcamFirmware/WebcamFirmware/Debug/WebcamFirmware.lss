
WebcamFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001644  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00401644  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004c8  20000434  00401a78  00020434  2**2
                  ALLOC
  3 .stack        00003004  200008fc  00401f40  00020434  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002045e  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001022c  00000000  00000000  000204b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000245f  00000000  00000000  000306e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00003b44  00000000  00000000  00032b42  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000890  00000000  00000000  00036686  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000808  00000000  00000000  00036f16  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000046b6  00000000  00000000  0003771e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a7ef  00000000  00000000  0003bdd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0004c677  00000000  00000000  000465c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000014e8  00000000  00000000  00092c3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	00 39 00 20 35 0b 40 00 31 0b 40 00 31 0b 40 00     .9. 5.@.1.@.1.@.
  400010:	31 0b 40 00 31 0b 40 00 31 0b 40 00 00 00 00 00     1.@.1.@.1.@.....
	...
  40002c:	31 0b 40 00 31 0b 40 00 00 00 00 00 31 0b 40 00     1.@.1.@.....1.@.
  40003c:	31 0b 40 00 31 0b 40 00 31 0b 40 00 31 0b 40 00     1.@.1.@.1.@.1.@.
  40004c:	31 0b 40 00 31 0b 40 00 31 0b 40 00 31 0b 40 00     1.@.1.@.1.@.1.@.
  40005c:	00 00 00 00 31 0b 40 00 31 0b 40 00 00 00 00 00     ....1.@.1.@.....
  40006c:	c5 06 40 00 d9 06 40 00 00 00 00 00 b1 02 40 00     ..@...@.......@.
  40007c:	31 0b 40 00 00 00 00 00 00 00 00 00 31 0b 40 00     1.@.........1.@.
  40008c:	31 0b 40 00 31 0b 40 00 31 0b 40 00 31 0b 40 00     1.@.1.@.1.@.1.@.
  40009c:	e9 01 40 00 31 0b 40 00 31 0b 40 00 00 00 00 00     ..@.1.@.1.@.....
	...
  4000b4:	31 0b 40 00 31 0b 40 00 31 0b 40 00 31 0b 40 00     1.@.1.@.1.@.1.@.
  4000c4:	31 0b 40 00 31 0b 40 00                             1.@.1.@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000434 	.word	0x20000434
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00401644 	.word	0x00401644

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	00401644 	.word	0x00401644
  40012c:	20000438 	.word	0x20000438
  400130:	00401644 	.word	0x00401644
  400134:	00000000 	.word	0x00000000

00400138 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400138:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40013a:	0189      	lsls	r1, r1, #6
  40013c:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  40013e:	2402      	movs	r4, #2
  400140:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400142:	f04f 31ff 	mov.w	r1, #4294967295
  400146:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400148:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  40014a:	605a      	str	r2, [r3, #4]
}
  40014c:	bc10      	pop	{r4}
  40014e:	4770      	bx	lr

00400150 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400150:	0189      	lsls	r1, r1, #6
  400152:	2305      	movs	r3, #5
  400154:	5043      	str	r3, [r0, r1]
  400156:	4770      	bx	lr

00400158 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400158:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  40015c:	61ca      	str	r2, [r1, #28]
  40015e:	4770      	bx	lr

00400160 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400160:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400164:	624a      	str	r2, [r1, #36]	; 0x24
  400166:	4770      	bx	lr

00400168 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400168:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  40016c:	6a08      	ldr	r0, [r1, #32]
}
  40016e:	4770      	bx	lr

00400170 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400170:	b4f0      	push	{r4, r5, r6, r7}
  400172:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400174:	2402      	movs	r4, #2
  400176:	9401      	str	r4, [sp, #4]
  400178:	2408      	movs	r4, #8
  40017a:	9402      	str	r4, [sp, #8]
  40017c:	2420      	movs	r4, #32
  40017e:	9403      	str	r4, [sp, #12]
  400180:	2480      	movs	r4, #128	; 0x80
  400182:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400184:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400186:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400188:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  40018a:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  40018e:	d814      	bhi.n	4001ba <tc_find_mck_divisor+0x4a>
  400190:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400192:	42a0      	cmp	r0, r4
  400194:	d217      	bcs.n	4001c6 <tc_find_mck_divisor+0x56>
  400196:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400198:	af01      	add	r7, sp, #4
  40019a:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  40019e:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  4001a2:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  4001a4:	4284      	cmp	r4, r0
  4001a6:	d30a      	bcc.n	4001be <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  4001a8:	4286      	cmp	r6, r0
  4001aa:	d90d      	bls.n	4001c8 <tc_find_mck_divisor+0x58>
			ul_index++) {
  4001ac:	3501      	adds	r5, #1
	for (ul_index = 0;
  4001ae:	2d05      	cmp	r5, #5
  4001b0:	d1f3      	bne.n	40019a <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  4001b2:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  4001b4:	b006      	add	sp, #24
  4001b6:	bcf0      	pop	{r4, r5, r6, r7}
  4001b8:	4770      	bx	lr
			return 0;
  4001ba:	2000      	movs	r0, #0
  4001bc:	e7fa      	b.n	4001b4 <tc_find_mck_divisor+0x44>
  4001be:	2000      	movs	r0, #0
  4001c0:	e7f8      	b.n	4001b4 <tc_find_mck_divisor+0x44>
	return 1;
  4001c2:	2001      	movs	r0, #1
  4001c4:	e7f6      	b.n	4001b4 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  4001c6:	2500      	movs	r5, #0
	if (p_uldiv) {
  4001c8:	b12a      	cbz	r2, 4001d6 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  4001ca:	a906      	add	r1, sp, #24
  4001cc:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  4001d0:	f851 1c14 	ldr.w	r1, [r1, #-20]
  4001d4:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  4001d6:	2b00      	cmp	r3, #0
  4001d8:	d0f3      	beq.n	4001c2 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  4001da:	601d      	str	r5, [r3, #0]
	return 1;
  4001dc:	2001      	movs	r0, #1
  4001de:	e7e9      	b.n	4001b4 <tc_find_mck_divisor+0x44>

004001e0 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  4001e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4001e4:	6043      	str	r3, [r0, #4]
  4001e6:	4770      	bx	lr

004001e8 <TC0_Handler>:
 */ 

#include "timer_interface.h"

void TC0_Handler(void)
{
  4001e8:	b508      	push	{r3, lr}
	uint32_t ul_status;

	// Read TC0 status.
	ul_status = tc_get_status(TC0, 0);
  4001ea:	2100      	movs	r1, #0
  4001ec:	4805      	ldr	r0, [pc, #20]	; (400204 <TC0_Handler+0x1c>)
  4001ee:	4b06      	ldr	r3, [pc, #24]	; (400208 <TC0_Handler+0x20>)
  4001f0:	4798      	blx	r3

	// RC compare.
	if ((ul_status & TC_SR_CPCS) == TC_SR_CPCS) {
  4001f2:	f010 0f10 	tst.w	r0, #16
  4001f6:	d004      	beq.n	400202 <TC0_Handler+0x1a>
		counts++;
  4001f8:	4a04      	ldr	r2, [pc, #16]	; (40020c <TC0_Handler+0x24>)
  4001fa:	7813      	ldrb	r3, [r2, #0]
  4001fc:	3301      	adds	r3, #1
  4001fe:	b2db      	uxtb	r3, r3
  400200:	7013      	strb	r3, [r2, #0]
  400202:	bd08      	pop	{r3, pc}
  400204:	40010000 	.word	0x40010000
  400208:	00400169 	.word	0x00400169
  40020c:	20000450 	.word	0x20000450

00400210 <configure_tc>:
	}
}

void configure_tc(void)
{
  400210:	b530      	push	{r4, r5, lr}
  400212:	b085      	sub	sp, #20

	// Get system clock.
	ul_sysclk = sysclk_get_cpu_hz();

	// Configure PMC.
	pmc_enable_periph_clk(ID_TC0);
  400214:	2017      	movs	r0, #23
  400216:	4b14      	ldr	r3, [pc, #80]	; (400268 <configure_tc+0x58>)
  400218:	4798      	blx	r3

	// Configure TC for a 1Hz frequency and trigger on RC compare.
	tc_find_mck_divisor(TC_FREQ, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  40021a:	4d14      	ldr	r5, [pc, #80]	; (40026c <configure_tc+0x5c>)
  40021c:	9500      	str	r5, [sp, #0]
  40021e:	ab02      	add	r3, sp, #8
  400220:	aa03      	add	r2, sp, #12
  400222:	4629      	mov	r1, r5
  400224:	2001      	movs	r0, #1
  400226:	4c12      	ldr	r4, [pc, #72]	; (400270 <configure_tc+0x60>)
  400228:	47a0      	blx	r4
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  40022a:	4c12      	ldr	r4, [pc, #72]	; (400274 <configure_tc+0x64>)
  40022c:	9a02      	ldr	r2, [sp, #8]
  40022e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  400232:	2100      	movs	r1, #0
  400234:	4620      	mov	r0, r4
  400236:	4b10      	ldr	r3, [pc, #64]	; (400278 <configure_tc+0x68>)
  400238:	4798      	blx	r3
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / TC_FREQ);
  40023a:	9a03      	ldr	r2, [sp, #12]
  40023c:	fbb5 f2f2 	udiv	r2, r5, r2
  400240:	2100      	movs	r1, #0
  400242:	4620      	mov	r0, r4
  400244:	4b0d      	ldr	r3, [pc, #52]	; (40027c <configure_tc+0x6c>)
  400246:	4798      	blx	r3
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400248:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40024c:	4b0c      	ldr	r3, [pc, #48]	; (400280 <configure_tc+0x70>)
  40024e:	601a      	str	r2, [r3, #0]

	// Configure and enable interrupt on RC compare.
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  400250:	2210      	movs	r2, #16
  400252:	2100      	movs	r1, #0
  400254:	4620      	mov	r0, r4
  400256:	4b0b      	ldr	r3, [pc, #44]	; (400284 <configure_tc+0x74>)
  400258:	4798      	blx	r3
	
	// Start the timer
	tc_start(TC0, 0);
  40025a:	2100      	movs	r1, #0
  40025c:	4620      	mov	r0, r4
  40025e:	4b0a      	ldr	r3, [pc, #40]	; (400288 <configure_tc+0x78>)
  400260:	4798      	blx	r3
  400262:	b005      	add	sp, #20
  400264:	bd30      	pop	{r4, r5, pc}
  400266:	bf00      	nop
  400268:	00400a95 	.word	0x00400a95
  40026c:	07270e00 	.word	0x07270e00
  400270:	00400171 	.word	0x00400171
  400274:	40010000 	.word	0x40010000
  400278:	00400139 	.word	0x00400139
  40027c:	00400159 	.word	0x00400159
  400280:	e000e100 	.word	0xe000e100
  400284:	00400161 	.word	0x00400161
  400288:	00400151 	.word	0x00400151

0040028c <wifi_web_setup_handler>:
void wifi_web_setup_handler(uint32_t ul_id, uint32_t ul_mask) 
{
	unused(ul_id);
	unused(ul_mask);

	wifi_setup_flag = true;
  40028c:	2201      	movs	r2, #1
  40028e:	4b01      	ldr	r3, [pc, #4]	; (400294 <wifi_web_setup_handler+0x8>)
  400290:	701a      	strb	r2, [r3, #0]
  400292:	4770      	bx	lr
  400294:	20000468 	.word	0x20000468

00400298 <process_incoming_byte_wifi>:
	buffer_wifi[input_pos_wifi] = in_byte;
  400298:	4b03      	ldr	r3, [pc, #12]	; (4002a8 <process_incoming_byte_wifi+0x10>)
  40029a:	681a      	ldr	r2, [r3, #0]
  40029c:	4903      	ldr	r1, [pc, #12]	; (4002ac <process_incoming_byte_wifi+0x14>)
  40029e:	5488      	strb	r0, [r1, r2]
	input_pos_wifi++;
  4002a0:	681a      	ldr	r2, [r3, #0]
  4002a2:	3201      	adds	r2, #1
  4002a4:	601a      	str	r2, [r3, #0]
  4002a6:	4770      	bx	lr
  4002a8:	20000454 	.word	0x20000454
  4002ac:	200004e8 	.word	0x200004e8

004002b0 <USART0_Handler>:
{
  4002b0:	b510      	push	{r4, lr}
	ul_status = usart_get_status(BOARD_USART);
  4002b2:	480a      	ldr	r0, [pc, #40]	; (4002dc <USART0_Handler+0x2c>)
  4002b4:	4b0a      	ldr	r3, [pc, #40]	; (4002e0 <USART0_Handler+0x30>)
  4002b6:	4798      	blx	r3
	if (ul_status & US_CSR_RXBUFF) {
  4002b8:	f410 5f80 	tst.w	r0, #4096	; 0x1000
  4002bc:	d100      	bne.n	4002c0 <USART0_Handler+0x10>
  4002be:	bd10      	pop	{r4, pc}
		usart_read(BOARD_USART, &received_byte_wifi);
  4002c0:	4c08      	ldr	r4, [pc, #32]	; (4002e4 <USART0_Handler+0x34>)
  4002c2:	4621      	mov	r1, r4
  4002c4:	4805      	ldr	r0, [pc, #20]	; (4002dc <USART0_Handler+0x2c>)
  4002c6:	4b08      	ldr	r3, [pc, #32]	; (4002e8 <USART0_Handler+0x38>)
  4002c8:	4798      	blx	r3
		new_rx_wifi = true;
  4002ca:	2201      	movs	r2, #1
  4002cc:	4b07      	ldr	r3, [pc, #28]	; (4002ec <USART0_Handler+0x3c>)
  4002ce:	701a      	strb	r2, [r3, #0]
		process_incoming_byte_wifi((uint8_t)received_byte_wifi);
  4002d0:	6820      	ldr	r0, [r4, #0]
  4002d2:	b2c0      	uxtb	r0, r0
  4002d4:	4b06      	ldr	r3, [pc, #24]	; (4002f0 <USART0_Handler+0x40>)
  4002d6:	4798      	blx	r3
}
  4002d8:	e7f1      	b.n	4002be <USART0_Handler+0xe>
  4002da:	bf00      	nop
  4002dc:	40024000 	.word	0x40024000
  4002e0:	004005d1 	.word	0x004005d1
  4002e4:	20000460 	.word	0x20000460
  4002e8:	004005d5 	.word	0x004005d5
  4002ec:	20000458 	.word	0x20000458
  4002f0:	00400299 	.word	0x00400299

004002f4 <process_data_wifi>:
{
  4002f4:	b508      	push	{r3, lr}
	if(strstr(buffer_wifi,msg_START_TRANSFER)){
  4002f6:	490b      	ldr	r1, [pc, #44]	; (400324 <process_data_wifi+0x30>)
  4002f8:	480b      	ldr	r0, [pc, #44]	; (400328 <process_data_wifi+0x34>)
  4002fa:	4b0c      	ldr	r3, [pc, #48]	; (40032c <process_data_wifi+0x38>)
  4002fc:	4798      	blx	r3
  4002fe:	b118      	cbz	r0, 400308 <process_data_wifi+0x14>
		receivedMessage = START_TRANSFER;
  400300:	2202      	movs	r2, #2
  400302:	4b0b      	ldr	r3, [pc, #44]	; (400330 <process_data_wifi+0x3c>)
  400304:	601a      	str	r2, [r3, #0]
  400306:	bd08      	pop	{r3, pc}
    	if(strstr(buffer_wifi,msg_CLIENT_NOT_CONNECTED)){
  400308:	490a      	ldr	r1, [pc, #40]	; (400334 <process_data_wifi+0x40>)
  40030a:	4807      	ldr	r0, [pc, #28]	; (400328 <process_data_wifi+0x34>)
  40030c:	4b07      	ldr	r3, [pc, #28]	; (40032c <process_data_wifi+0x38>)
  40030e:	4798      	blx	r3
  400310:	b118      	cbz	r0, 40031a <process_data_wifi+0x26>
			receivedMessage = CLIENT_NOT_CONNECTED	;
  400312:	2204      	movs	r2, #4
  400314:	4b06      	ldr	r3, [pc, #24]	; (400330 <process_data_wifi+0x3c>)
  400316:	601a      	str	r2, [r3, #0]
  400318:	bd08      	pop	{r3, pc}
				receivedMessage = 4000;
  40031a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
  40031e:	4b04      	ldr	r3, [pc, #16]	; (400330 <process_data_wifi+0x3c>)
  400320:	601a      	str	r2, [r3, #0]
  400322:	bd08      	pop	{r3, pc}
  400324:	004015f4 	.word	0x004015f4
  400328:	200004e8 	.word	0x200004e8
  40032c:	004010b9 	.word	0x004010b9
  400330:	2000045c 	.word	0x2000045c
  400334:	00401604 	.word	0x00401604

00400338 <wifi_command_response_handler>:
{
  400338:	b508      	push	{r3, lr}
	process_data_wifi();
  40033a:	4b06      	ldr	r3, [pc, #24]	; (400354 <wifi_command_response_handler+0x1c>)
  40033c:	4798      	blx	r3
	input_pos_wifi = 0;
  40033e:	2300      	movs	r3, #0
  400340:	4a05      	ldr	r2, [pc, #20]	; (400358 <wifi_command_response_handler+0x20>)
  400342:	6013      	str	r3, [r2, #0]
		buffer_wifi[ii] = 0;
  400344:	4905      	ldr	r1, [pc, #20]	; (40035c <wifi_command_response_handler+0x24>)
  400346:	461a      	mov	r2, r3
  400348:	54ca      	strb	r2, [r1, r3]
	for(uint32_t ii = 0 ;ii < MAX_INPUT_WIFI; ii++){
  40034a:	3301      	adds	r3, #1
  40034c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  400350:	d1fa      	bne.n	400348 <wifi_command_response_handler+0x10>
}
  400352:	bd08      	pop	{r3, pc}
  400354:	004002f5 	.word	0x004002f5
  400358:	20000454 	.word	0x20000454
  40035c:	200004e8 	.word	0x200004e8

00400360 <configure_usart_wifi>:

/*
Configuration of USART port used to communicate with the AMW136.
*/
void configure_usart_wifi(void) 
{
  400360:	b530      	push	{r4, r5, lr}
  400362:	b087      	sub	sp, #28
	
	static uint32_t ul_sysclk;
	const sam_usart_opt_t usart_console_settings = {
  400364:	466c      	mov	r4, sp
  400366:	4d1c      	ldr	r5, [pc, #112]	; (4003d8 <configure_usart_wifi+0x78>)
  400368:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40036a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40036c:	e895 0003 	ldmia.w	r5, {r0, r1}
  400370:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Get peripheral clock. */
	ul_sysclk = sysclk_get_peripheral_hz();
  400374:	4d19      	ldr	r5, [pc, #100]	; (4003dc <configure_usart_wifi+0x7c>)
  400376:	4b1a      	ldr	r3, [pc, #104]	; (4003e0 <configure_usart_wifi+0x80>)
  400378:	602b      	str	r3, [r5, #0]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40037a:	200e      	movs	r0, #14
  40037c:	4b19      	ldr	r3, [pc, #100]	; (4003e4 <configure_usart_wifi+0x84>)
  40037e:	4798      	blx	r3

	/* Enable peripheral clock. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);

	/* Configure USART. */
	usart_init_hw_handshaking(BOARD_USART, &usart_console_settings, ul_sysclk);
  400380:	4c19      	ldr	r4, [pc, #100]	; (4003e8 <configure_usart_wifi+0x88>)
  400382:	682a      	ldr	r2, [r5, #0]
  400384:	4669      	mov	r1, sp
  400386:	4620      	mov	r0, r4
  400388:	4b18      	ldr	r3, [pc, #96]	; (4003ec <configure_usart_wifi+0x8c>)
  40038a:	4798      	blx	r3

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
  40038c:	f04f 31ff 	mov.w	r1, #4294967295
  400390:	4620      	mov	r0, r4
  400392:	4b17      	ldr	r3, [pc, #92]	; (4003f0 <configure_usart_wifi+0x90>)
  400394:	4798      	blx	r3
	
	/* Enable TX & RX function. */
	usart_enable_tx(BOARD_USART);
  400396:	4620      	mov	r0, r4
  400398:	4b16      	ldr	r3, [pc, #88]	; (4003f4 <configure_usart_wifi+0x94>)
  40039a:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
  40039c:	4620      	mov	r0, r4
  40039e:	4b16      	ldr	r3, [pc, #88]	; (4003f8 <configure_usart_wifi+0x98>)
  4003a0:	4798      	blx	r3

	usart_enable_interrupt(BOARD_USART, US_IER_RXRDY);
  4003a2:	2101      	movs	r1, #1
  4003a4:	4620      	mov	r0, r4
  4003a6:	4b15      	ldr	r3, [pc, #84]	; (4003fc <configure_usart_wifi+0x9c>)
  4003a8:	4798      	blx	r3
  4003aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4003ae:	4b14      	ldr	r3, [pc, #80]	; (400400 <configure_usart_wifi+0xa0>)
  4003b0:	601a      	str	r2, [r3, #0]
	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);

	// Configure the RX / TX pins
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
  4003b2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4003b6:	2005      	movs	r0, #5
  4003b8:	4c12      	ldr	r4, [pc, #72]	; (400404 <configure_usart_wifi+0xa4>)
  4003ba:	47a0      	blx	r4
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
  4003bc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4003c0:	2006      	movs	r0, #6
  4003c2:	47a0      	blx	r4
	/* Configure USART CTS pin */
	gpio_configure_pin(PIN_USART0_CTS_IDX, PIN_USART0_CTS_FLAGS);
  4003c4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4003c8:	2008      	movs	r0, #8
  4003ca:	47a0      	blx	r4
	/* Configure USART RTS pin */
	gpio_configure_pin(PIN_USART0_RTS_IDX, PIN_USART0_RTS_FLAGS);
  4003cc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4003d0:	2007      	movs	r0, #7
  4003d2:	47a0      	blx	r4
	
	// might just pull wifi_cts low
}
  4003d4:	b007      	add	sp, #28
  4003d6:	bd30      	pop	{r4, r5, pc}
  4003d8:	004015dc 	.word	0x004015dc
  4003dc:	20000464 	.word	0x20000464
  4003e0:	07270e00 	.word	0x07270e00
  4003e4:	00400a95 	.word	0x00400a95
  4003e8:	40024000 	.word	0x40024000
  4003ec:	00400599 	.word	0x00400599
  4003f0:	004005cd 	.word	0x004005cd
  4003f4:	004005bd 	.word	0x004005bd
  4003f8:	004005c3 	.word	0x004005c3
  4003fc:	004005c9 	.word	0x004005c9
  400400:	e000e100 	.word	0xe000e100
  400404:	0040088d 	.word	0x0040088d

00400408 <configure_wifi_comm_pin>:

/*
Configuration of command complete rising-edge interrupt.
*/
void configure_wifi_comm_pin(void) 
{
  400408:	b530      	push	{r4, r5, lr}
  40040a:	b083      	sub	sp, #12
	/* Configure PIO clock. */
	
	pmc_enable_periph_clk(WIFI_COM_COMPLETE_ID);
  40040c:	200b      	movs	r0, #11
  40040e:	4b0e      	ldr	r3, [pc, #56]	; (400448 <configure_wifi_comm_pin+0x40>)
  400410:	4798      	blx	r3
	
	/* Adjust PIO debounce filter using a 10 Hz filter. */
	pio_set_debounce_filter(WIFI_COM_COMPLETE_PIO, WIFI_COM_COMPLETE_MSK, 10);
  400412:	4c0e      	ldr	r4, [pc, #56]	; (40044c <configure_wifi_comm_pin+0x44>)
  400414:	220a      	movs	r2, #10
  400416:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40041a:	4620      	mov	r0, r4
  40041c:	4b0c      	ldr	r3, [pc, #48]	; (400450 <configure_wifi_comm_pin+0x48>)
  40041e:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(WIFI_COM_COMPLETE_PIO, WIFI_COM_COMPLETE_ID, WIFI_COM_COMPLETE_MSK,
  400420:	4b0c      	ldr	r3, [pc, #48]	; (400454 <configure_wifi_comm_pin+0x4c>)
  400422:	9300      	str	r3, [sp, #0]
  400424:	2371      	movs	r3, #113	; 0x71
  400426:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40042a:	210b      	movs	r1, #11
  40042c:	4620      	mov	r0, r4
  40042e:	4d0a      	ldr	r5, [pc, #40]	; (400458 <configure_wifi_comm_pin+0x50>)
  400430:	47a8      	blx	r5
  400432:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400436:	4b09      	ldr	r3, [pc, #36]	; (40045c <configure_wifi_comm_pin+0x54>)
  400438:	601a      	str	r2, [r3, #0]

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)WIFI_COM_COMPLETE_ID);

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(WIFI_COM_COMPLETE_PIO, WIFI_COM_COMPLETE_MSK);
  40043a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40043e:	4620      	mov	r0, r4
  400440:	4b07      	ldr	r3, [pc, #28]	; (400460 <configure_wifi_comm_pin+0x58>)
  400442:	4798      	blx	r3
}
  400444:	b003      	add	sp, #12
  400446:	bd30      	pop	{r4, r5, pc}
  400448:	00400a95 	.word	0x00400a95
  40044c:	400e0e00 	.word	0x400e0e00
  400450:	00400751 	.word	0x00400751
  400454:	00400339 	.word	0x00400339
  400458:	00400655 	.word	0x00400655
  40045c:	e000e100 	.word	0xe000e100
  400460:	00400881 	.word	0x00400881

00400464 <configure_wifi_web_setup_pin>:

/*
Configuration of button interrupt to initiate web setup.
*/
void configure_wifi_web_setup_pin(void) 
{
  400464:	b530      	push	{r4, r5, lr}
  400466:	b083      	sub	sp, #12
	/* Configure PIO clock. */
	pmc_enable_periph_clk(PUSH_BUTTON_ID);
  400468:	200b      	movs	r0, #11
  40046a:	4b0d      	ldr	r3, [pc, #52]	; (4004a0 <configure_wifi_web_setup_pin+0x3c>)
  40046c:	4798      	blx	r3

	/* Adjust PIO debounce filter using a 10 Hz filter. */
	pio_set_debounce_filter(PUSH_BUTTON_PIO, PUSH_BUTTON_PIN_MSK, 10);
  40046e:	4c0d      	ldr	r4, [pc, #52]	; (4004a4 <configure_wifi_web_setup_pin+0x40>)
  400470:	220a      	movs	r2, #10
  400472:	2101      	movs	r1, #1
  400474:	4620      	mov	r0, r4
  400476:	4b0c      	ldr	r3, [pc, #48]	; (4004a8 <configure_wifi_web_setup_pin+0x44>)
  400478:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(PUSH_BUTTON_PIO, PUSH_BUTTON_ID, PUSH_BUTTON_PIN_MSK,
  40047a:	4b0c      	ldr	r3, [pc, #48]	; (4004ac <configure_wifi_web_setup_pin+0x48>)
  40047c:	9300      	str	r3, [sp, #0]
  40047e:	2349      	movs	r3, #73	; 0x49
  400480:	2201      	movs	r2, #1
  400482:	210b      	movs	r1, #11
  400484:	4620      	mov	r0, r4
  400486:	4d0a      	ldr	r5, [pc, #40]	; (4004b0 <configure_wifi_web_setup_pin+0x4c>)
  400488:	47a8      	blx	r5
  40048a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40048e:	4b09      	ldr	r3, [pc, #36]	; (4004b4 <configure_wifi_web_setup_pin+0x50>)
  400490:	601a      	str	r2, [r3, #0]

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)PUSH_BUTTON_ID);

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(PUSH_BUTTON_PIO, PUSH_BUTTON_PIN_MSK);
  400492:	2101      	movs	r1, #1
  400494:	4620      	mov	r0, r4
  400496:	4b08      	ldr	r3, [pc, #32]	; (4004b8 <configure_wifi_web_setup_pin+0x54>)
  400498:	4798      	blx	r3
}
  40049a:	b003      	add	sp, #12
  40049c:	bd30      	pop	{r4, r5, pc}
  40049e:	bf00      	nop
  4004a0:	00400a95 	.word	0x00400a95
  4004a4:	400e0e00 	.word	0x400e0e00
  4004a8:	00400751 	.word	0x00400751
  4004ac:	0040028d 	.word	0x0040028d
  4004b0:	00400655 	.word	0x00400655
  4004b4:	e000e100 	.word	0xe000e100
  4004b8:	00400881 	.word	0x00400881

004004bc <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4004bc:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4004be:	010b      	lsls	r3, r1, #4
  4004c0:	4293      	cmp	r3, r2
  4004c2:	d914      	bls.n	4004ee <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4004c4:	00c9      	lsls	r1, r1, #3
  4004c6:	084b      	lsrs	r3, r1, #1
  4004c8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4004cc:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  4004d0:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4004d2:	1e5c      	subs	r4, r3, #1
  4004d4:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4004d8:	428c      	cmp	r4, r1
  4004da:	d901      	bls.n	4004e0 <usart_set_async_baudrate+0x24>
		return 1;
  4004dc:	2001      	movs	r0, #1
  4004de:	e017      	b.n	400510 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4004e0:	6841      	ldr	r1, [r0, #4]
  4004e2:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4004e6:	6041      	str	r1, [r0, #4]
  4004e8:	e00c      	b.n	400504 <usart_set_async_baudrate+0x48>
		return 1;
  4004ea:	2001      	movs	r0, #1
  4004ec:	e010      	b.n	400510 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4004ee:	0859      	lsrs	r1, r3, #1
  4004f0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4004f4:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  4004f8:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4004fa:	1e5c      	subs	r4, r3, #1
  4004fc:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400500:	428c      	cmp	r4, r1
  400502:	d8f2      	bhi.n	4004ea <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400504:	0412      	lsls	r2, r2, #16
  400506:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  40050a:	431a      	orrs	r2, r3
  40050c:	6202      	str	r2, [r0, #32]

	return 0;
  40050e:	2000      	movs	r0, #0
}
  400510:	bc10      	pop	{r4}
  400512:	4770      	bx	lr

00400514 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400514:	4b0a      	ldr	r3, [pc, #40]	; (400540 <usart_reset+0x2c>)
  400516:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  40051a:	2300      	movs	r3, #0
  40051c:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  40051e:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400520:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400522:	2388      	movs	r3, #136	; 0x88
  400524:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400526:	2324      	movs	r3, #36	; 0x24
  400528:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  40052a:	f44f 7380 	mov.w	r3, #256	; 0x100
  40052e:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400530:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400534:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_DTRDIS;
  400536:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  40053a:	6003      	str	r3, [r0, #0]
  40053c:	4770      	bx	lr
  40053e:	bf00      	nop
  400540:	55534100 	.word	0x55534100

00400544 <usart_init_rs232>:
{
  400544:	b570      	push	{r4, r5, r6, lr}
  400546:	4605      	mov	r5, r0
  400548:	460c      	mov	r4, r1
  40054a:	4616      	mov	r6, r2
	usart_reset(p_usart);
  40054c:	4b0f      	ldr	r3, [pc, #60]	; (40058c <usart_init_rs232+0x48>)
  40054e:	4798      	blx	r3
	ul_reg_val = 0;
  400550:	2200      	movs	r2, #0
  400552:	4b0f      	ldr	r3, [pc, #60]	; (400590 <usart_init_rs232+0x4c>)
  400554:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400556:	b1a4      	cbz	r4, 400582 <usart_init_rs232+0x3e>
  400558:	4632      	mov	r2, r6
  40055a:	6821      	ldr	r1, [r4, #0]
  40055c:	4628      	mov	r0, r5
  40055e:	4b0d      	ldr	r3, [pc, #52]	; (400594 <usart_init_rs232+0x50>)
  400560:	4798      	blx	r3
  400562:	4602      	mov	r2, r0
  400564:	b978      	cbnz	r0, 400586 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400566:	6863      	ldr	r3, [r4, #4]
  400568:	68a1      	ldr	r1, [r4, #8]
  40056a:	430b      	orrs	r3, r1
  40056c:	6921      	ldr	r1, [r4, #16]
  40056e:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400570:	68e1      	ldr	r1, [r4, #12]
  400572:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400574:	4906      	ldr	r1, [pc, #24]	; (400590 <usart_init_rs232+0x4c>)
  400576:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  400578:	6869      	ldr	r1, [r5, #4]
  40057a:	430b      	orrs	r3, r1
  40057c:	606b      	str	r3, [r5, #4]
}
  40057e:	4610      	mov	r0, r2
  400580:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  400582:	2201      	movs	r2, #1
  400584:	e7fb      	b.n	40057e <usart_init_rs232+0x3a>
  400586:	2201      	movs	r2, #1
  400588:	e7f9      	b.n	40057e <usart_init_rs232+0x3a>
  40058a:	bf00      	nop
  40058c:	00400515 	.word	0x00400515
  400590:	2000046c 	.word	0x2000046c
  400594:	004004bd 	.word	0x004004bd

00400598 <usart_init_hw_handshaking>:
{
  400598:	b510      	push	{r4, lr}
  40059a:	4604      	mov	r4, r0
	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
  40059c:	4b06      	ldr	r3, [pc, #24]	; (4005b8 <usart_init_hw_handshaking+0x20>)
  40059e:	4798      	blx	r3
  4005a0:	b940      	cbnz	r0, 4005b4 <usart_init_hw_handshaking+0x1c>
  4005a2:	4602      	mov	r2, r0
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
  4005a4:	6863      	ldr	r3, [r4, #4]
  4005a6:	f023 030f 	bic.w	r3, r3, #15
  4005aa:	f043 0302 	orr.w	r3, r3, #2
  4005ae:	6063      	str	r3, [r4, #4]
}
  4005b0:	4610      	mov	r0, r2
  4005b2:	bd10      	pop	{r4, pc}
		return 1;
  4005b4:	2201      	movs	r2, #1
  4005b6:	e7fb      	b.n	4005b0 <usart_init_hw_handshaking+0x18>
  4005b8:	00400545 	.word	0x00400545

004005bc <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  4005bc:	2340      	movs	r3, #64	; 0x40
  4005be:	6003      	str	r3, [r0, #0]
  4005c0:	4770      	bx	lr

004005c2 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  4005c2:	2310      	movs	r3, #16
  4005c4:	6003      	str	r3, [r0, #0]
  4005c6:	4770      	bx	lr

004005c8 <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
  4005c8:	6081      	str	r1, [r0, #8]
  4005ca:	4770      	bx	lr

004005cc <usart_disable_interrupt>:
	p_usart->US_IDR = ul_sources;
  4005cc:	60c1      	str	r1, [r0, #12]
  4005ce:	4770      	bx	lr

004005d0 <usart_get_status>:
	return p_usart->US_CSR;
  4005d0:	6940      	ldr	r0, [r0, #20]
}
  4005d2:	4770      	bx	lr

004005d4 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4005d4:	6943      	ldr	r3, [r0, #20]
  4005d6:	f013 0f01 	tst.w	r3, #1
  4005da:	d005      	beq.n	4005e8 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4005dc:	6983      	ldr	r3, [r0, #24]
  4005de:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4005e2:	600b      	str	r3, [r1, #0]
	return 0;
  4005e4:	2000      	movs	r0, #0
  4005e6:	4770      	bx	lr
		return 1;
  4005e8:	2001      	movs	r0, #1
}
  4005ea:	4770      	bx	lr

004005ec <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4005ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4005f0:	4681      	mov	r9, r0
  4005f2:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4005f4:	4b12      	ldr	r3, [pc, #72]	; (400640 <pio_handler_process+0x54>)
  4005f6:	4798      	blx	r3
  4005f8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4005fa:	4648      	mov	r0, r9
  4005fc:	4b11      	ldr	r3, [pc, #68]	; (400644 <pio_handler_process+0x58>)
  4005fe:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400600:	4005      	ands	r5, r0
  400602:	d013      	beq.n	40062c <pio_handler_process+0x40>
  400604:	4c10      	ldr	r4, [pc, #64]	; (400648 <pio_handler_process+0x5c>)
  400606:	f104 0660 	add.w	r6, r4, #96	; 0x60
  40060a:	e003      	b.n	400614 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40060c:	42b4      	cmp	r4, r6
  40060e:	d00d      	beq.n	40062c <pio_handler_process+0x40>
  400610:	3410      	adds	r4, #16
		while (status != 0) {
  400612:	b15d      	cbz	r5, 40062c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400614:	6820      	ldr	r0, [r4, #0]
  400616:	42b8      	cmp	r0, r7
  400618:	d1f8      	bne.n	40060c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40061a:	6861      	ldr	r1, [r4, #4]
  40061c:	4229      	tst	r1, r5
  40061e:	d0f5      	beq.n	40060c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400620:	68e3      	ldr	r3, [r4, #12]
  400622:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400624:	6863      	ldr	r3, [r4, #4]
  400626:	ea25 0503 	bic.w	r5, r5, r3
  40062a:	e7ef      	b.n	40060c <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  40062c:	4b07      	ldr	r3, [pc, #28]	; (40064c <pio_handler_process+0x60>)
  40062e:	681b      	ldr	r3, [r3, #0]
  400630:	b123      	cbz	r3, 40063c <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400632:	4b07      	ldr	r3, [pc, #28]	; (400650 <pio_handler_process+0x64>)
  400634:	681b      	ldr	r3, [r3, #0]
  400636:	b10b      	cbz	r3, 40063c <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400638:	4648      	mov	r0, r9
  40063a:	4798      	blx	r3
  40063c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400640:	00400885 	.word	0x00400885
  400644:	00400889 	.word	0x00400889
  400648:	20000470 	.word	0x20000470
  40064c:	200008d4 	.word	0x200008d4
  400650:	200004e4 	.word	0x200004e4

00400654 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400656:	4c18      	ldr	r4, [pc, #96]	; (4006b8 <pio_handler_set+0x64>)
  400658:	6826      	ldr	r6, [r4, #0]
  40065a:	2e06      	cmp	r6, #6
  40065c:	d829      	bhi.n	4006b2 <pio_handler_set+0x5e>
  40065e:	f04f 0c00 	mov.w	ip, #0
  400662:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400664:	4f15      	ldr	r7, [pc, #84]	; (4006bc <pio_handler_set+0x68>)
  400666:	e004      	b.n	400672 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400668:	3401      	adds	r4, #1
  40066a:	b2e4      	uxtb	r4, r4
  40066c:	46a4      	mov	ip, r4
  40066e:	42a6      	cmp	r6, r4
  400670:	d309      	bcc.n	400686 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  400672:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400674:	0125      	lsls	r5, r4, #4
  400676:	597d      	ldr	r5, [r7, r5]
  400678:	428d      	cmp	r5, r1
  40067a:	d1f5      	bne.n	400668 <pio_handler_set+0x14>
  40067c:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  400680:	686d      	ldr	r5, [r5, #4]
  400682:	4295      	cmp	r5, r2
  400684:	d1f0      	bne.n	400668 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400686:	4d0d      	ldr	r5, [pc, #52]	; (4006bc <pio_handler_set+0x68>)
  400688:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  40068c:	eb05 040e 	add.w	r4, r5, lr
  400690:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  400694:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  400696:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  400698:	9906      	ldr	r1, [sp, #24]
  40069a:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  40069c:	3601      	adds	r6, #1
  40069e:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
  4006a0:	bf04      	itt	eq
  4006a2:	4905      	ldreq	r1, [pc, #20]	; (4006b8 <pio_handler_set+0x64>)
  4006a4:	600e      	streq	r6, [r1, #0]
  4006a6:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4006a8:	461a      	mov	r2, r3
  4006aa:	4b05      	ldr	r3, [pc, #20]	; (4006c0 <pio_handler_set+0x6c>)
  4006ac:	4798      	blx	r3

	return 0;
  4006ae:	2000      	movs	r0, #0
  4006b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
  4006b2:	2001      	movs	r0, #1
}
  4006b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4006b6:	bf00      	nop
  4006b8:	200004e0 	.word	0x200004e0
  4006bc:	20000470 	.word	0x20000470
  4006c0:	00400853 	.word	0x00400853

004006c4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4006c4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4006c6:	210b      	movs	r1, #11
  4006c8:	4801      	ldr	r0, [pc, #4]	; (4006d0 <PIOA_Handler+0xc>)
  4006ca:	4b02      	ldr	r3, [pc, #8]	; (4006d4 <PIOA_Handler+0x10>)
  4006cc:	4798      	blx	r3
  4006ce:	bd08      	pop	{r3, pc}
  4006d0:	400e0e00 	.word	0x400e0e00
  4006d4:	004005ed 	.word	0x004005ed

004006d8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4006d8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4006da:	210c      	movs	r1, #12
  4006dc:	4801      	ldr	r0, [pc, #4]	; (4006e4 <PIOB_Handler+0xc>)
  4006de:	4b02      	ldr	r3, [pc, #8]	; (4006e8 <PIOB_Handler+0x10>)
  4006e0:	4798      	blx	r3
  4006e2:	bd08      	pop	{r3, pc}
  4006e4:	400e1000 	.word	0x400e1000
  4006e8:	004005ed 	.word	0x004005ed

004006ec <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4006ec:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4006ee:	480e      	ldr	r0, [pc, #56]	; (400728 <sysclk_init+0x3c>)
  4006f0:	4b0e      	ldr	r3, [pc, #56]	; (40072c <sysclk_init+0x40>)
  4006f2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4006f4:	213e      	movs	r1, #62	; 0x3e
  4006f6:	2000      	movs	r0, #0
  4006f8:	4b0d      	ldr	r3, [pc, #52]	; (400730 <sysclk_init+0x44>)
  4006fa:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4006fc:	4c0d      	ldr	r4, [pc, #52]	; (400734 <sysclk_init+0x48>)
  4006fe:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400700:	2800      	cmp	r0, #0
  400702:	d0fc      	beq.n	4006fe <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400704:	4b0c      	ldr	r3, [pc, #48]	; (400738 <sysclk_init+0x4c>)
  400706:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400708:	4a0c      	ldr	r2, [pc, #48]	; (40073c <sysclk_init+0x50>)
  40070a:	4b0d      	ldr	r3, [pc, #52]	; (400740 <sysclk_init+0x54>)
  40070c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40070e:	4c0d      	ldr	r4, [pc, #52]	; (400744 <sysclk_init+0x58>)
  400710:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400712:	2800      	cmp	r0, #0
  400714:	d0fc      	beq.n	400710 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400716:	2010      	movs	r0, #16
  400718:	4b0b      	ldr	r3, [pc, #44]	; (400748 <sysclk_init+0x5c>)
  40071a:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40071c:	4b0b      	ldr	r3, [pc, #44]	; (40074c <sysclk_init+0x60>)
  40071e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400720:	4801      	ldr	r0, [pc, #4]	; (400728 <sysclk_init+0x3c>)
  400722:	4b02      	ldr	r3, [pc, #8]	; (40072c <sysclk_init+0x40>)
  400724:	4798      	blx	r3
  400726:	bd10      	pop	{r4, pc}
  400728:	07270e00 	.word	0x07270e00
  40072c:	00400cf1 	.word	0x00400cf1
  400730:	00400a11 	.word	0x00400a11
  400734:	00400a65 	.word	0x00400a65
  400738:	00400a75 	.word	0x00400a75
  40073c:	20133f01 	.word	0x20133f01
  400740:	400e0400 	.word	0x400e0400
  400744:	00400a85 	.word	0x00400a85
  400748:	004009ad 	.word	0x004009ad
  40074c:	00400be1 	.word	0x00400be1

00400750 <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  400750:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  400754:	0053      	lsls	r3, r2, #1
  400756:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40075a:	fbb2 f2f3 	udiv	r2, r2, r3
  40075e:	3a01      	subs	r2, #1
  400760:	f3c2 020d 	ubfx	r2, r2, #0, #14
  400764:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  400768:	4770      	bx	lr

0040076a <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40076a:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40076c:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400770:	d039      	beq.n	4007e6 <pio_set_peripheral+0x7c>
  400772:	d813      	bhi.n	40079c <pio_set_peripheral+0x32>
  400774:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400778:	d025      	beq.n	4007c6 <pio_set_peripheral+0x5c>
  40077a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40077e:	d10a      	bne.n	400796 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400780:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400782:	4313      	orrs	r3, r2
  400784:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400786:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400788:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40078a:	400b      	ands	r3, r1
  40078c:	ea23 0302 	bic.w	r3, r3, r2
  400790:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400792:	6042      	str	r2, [r0, #4]
  400794:	4770      	bx	lr
	switch (ul_type) {
  400796:	2900      	cmp	r1, #0
  400798:	d1fb      	bne.n	400792 <pio_set_peripheral+0x28>
  40079a:	4770      	bx	lr
  40079c:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4007a0:	d020      	beq.n	4007e4 <pio_set_peripheral+0x7a>
  4007a2:	d809      	bhi.n	4007b8 <pio_set_peripheral+0x4e>
  4007a4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4007a8:	d1f3      	bne.n	400792 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  4007aa:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4007ac:	4313      	orrs	r3, r2
  4007ae:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4007b0:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4007b2:	4313      	orrs	r3, r2
  4007b4:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4007b6:	e7ec      	b.n	400792 <pio_set_peripheral+0x28>
	switch (ul_type) {
  4007b8:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4007bc:	d012      	beq.n	4007e4 <pio_set_peripheral+0x7a>
  4007be:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4007c2:	d00f      	beq.n	4007e4 <pio_set_peripheral+0x7a>
  4007c4:	e7e5      	b.n	400792 <pio_set_peripheral+0x28>
{
  4007c6:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4007c8:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4007ca:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4007cc:	43d3      	mvns	r3, r2
  4007ce:	4021      	ands	r1, r4
  4007d0:	461c      	mov	r4, r3
  4007d2:	4019      	ands	r1, r3
  4007d4:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4007d6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4007d8:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4007da:	400b      	ands	r3, r1
  4007dc:	4023      	ands	r3, r4
  4007de:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4007e0:	6042      	str	r2, [r0, #4]
}
  4007e2:	bc10      	pop	{r4}
  4007e4:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4007e6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4007e8:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4007ea:	400b      	ands	r3, r1
  4007ec:	ea23 0302 	bic.w	r3, r3, r2
  4007f0:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4007f2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4007f4:	4313      	orrs	r3, r2
  4007f6:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4007f8:	e7cb      	b.n	400792 <pio_set_peripheral+0x28>

004007fa <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4007fa:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4007fc:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  400800:	bf14      	ite	ne
  400802:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400804:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400806:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  40080a:	bf14      	ite	ne
  40080c:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
  40080e:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  400810:	f012 0f02 	tst.w	r2, #2
  400814:	d107      	bne.n	400826 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400816:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  40081a:	bf18      	it	ne
  40081c:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
  400820:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400822:	6001      	str	r1, [r0, #0]
  400824:	4770      	bx	lr
		p_pio->PIO_IFSCDR = ul_mask;
  400826:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  40082a:	e7f9      	b.n	400820 <pio_set_input+0x26>

0040082c <pio_set_output>:
{
  40082c:	b410      	push	{r4}
  40082e:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400830:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400832:	b944      	cbnz	r4, 400846 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
  400834:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400836:	b143      	cbz	r3, 40084a <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
  400838:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  40083a:	b942      	cbnz	r2, 40084e <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
  40083c:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  40083e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400840:	6001      	str	r1, [r0, #0]
}
  400842:	bc10      	pop	{r4}
  400844:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400846:	6641      	str	r1, [r0, #100]	; 0x64
  400848:	e7f5      	b.n	400836 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  40084a:	6541      	str	r1, [r0, #84]	; 0x54
  40084c:	e7f5      	b.n	40083a <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  40084e:	6301      	str	r1, [r0, #48]	; 0x30
  400850:	e7f5      	b.n	40083e <pio_set_output+0x12>

00400852 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  400852:	f012 0f10 	tst.w	r2, #16
  400856:	d010      	beq.n	40087a <pio_configure_interrupt+0x28>
		p_pio->PIO_AIMER = ul_mask;
  400858:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  40085c:	f012 0f20 	tst.w	r2, #32
			p_pio->PIO_REHLSR = ul_mask;
  400860:	bf14      	ite	ne
  400862:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
  400866:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		if (ul_attr & PIO_IT_EDGE) {
  40086a:	f012 0f40 	tst.w	r2, #64	; 0x40
			p_pio->PIO_ESR = ul_mask;
  40086e:	bf14      	ite	ne
  400870:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
			p_pio->PIO_LSR = ul_mask;
  400874:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  400878:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  40087a:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  40087e:	4770      	bx	lr

00400880 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  400880:	6401      	str	r1, [r0, #64]	; 0x40
  400882:	4770      	bx	lr

00400884 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400884:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400886:	4770      	bx	lr

00400888 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400888:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40088a:	4770      	bx	lr

0040088c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  40088c:	b570      	push	{r4, r5, r6, lr}
  40088e:	b082      	sub	sp, #8
  400890:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400892:	0943      	lsrs	r3, r0, #5
  400894:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400898:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40089c:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  40089e:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  4008a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4008a6:	d053      	beq.n	400950 <pio_configure_pin+0xc4>
  4008a8:	d80a      	bhi.n	4008c0 <pio_configure_pin+0x34>
  4008aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4008ae:	d02d      	beq.n	40090c <pio_configure_pin+0x80>
  4008b0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4008b4:	d03b      	beq.n	40092e <pio_configure_pin+0xa2>
  4008b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4008ba:	d015      	beq.n	4008e8 <pio_configure_pin+0x5c>
		return 0;
  4008bc:	2000      	movs	r0, #0
  4008be:	e023      	b.n	400908 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
  4008c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4008c4:	d055      	beq.n	400972 <pio_configure_pin+0xe6>
  4008c6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4008ca:	d052      	beq.n	400972 <pio_configure_pin+0xe6>
  4008cc:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4008d0:	d1f4      	bne.n	4008bc <pio_configure_pin+0x30>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4008d2:	f000 011f 	and.w	r1, r0, #31
  4008d6:	2601      	movs	r6, #1
  4008d8:	462a      	mov	r2, r5
  4008da:	fa06 f101 	lsl.w	r1, r6, r1
  4008de:	4620      	mov	r0, r4
  4008e0:	4b2f      	ldr	r3, [pc, #188]	; (4009a0 <pio_configure_pin+0x114>)
  4008e2:	4798      	blx	r3
	return 1;
  4008e4:	4630      	mov	r0, r6
		break;
  4008e6:	e00f      	b.n	400908 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4008e8:	f000 001f 	and.w	r0, r0, #31
  4008ec:	2601      	movs	r6, #1
  4008ee:	4086      	lsls	r6, r0
  4008f0:	4632      	mov	r2, r6
  4008f2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4008f6:	4620      	mov	r0, r4
  4008f8:	4b2a      	ldr	r3, [pc, #168]	; (4009a4 <pio_configure_pin+0x118>)
  4008fa:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4008fc:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400900:	bf14      	ite	ne
  400902:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400904:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  400906:	2001      	movs	r0, #1
}
  400908:	b002      	add	sp, #8
  40090a:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  40090c:	f000 001f 	and.w	r0, r0, #31
  400910:	2601      	movs	r6, #1
  400912:	4086      	lsls	r6, r0
  400914:	4632      	mov	r2, r6
  400916:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40091a:	4620      	mov	r0, r4
  40091c:	4b21      	ldr	r3, [pc, #132]	; (4009a4 <pio_configure_pin+0x118>)
  40091e:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400920:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400924:	bf14      	ite	ne
  400926:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400928:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  40092a:	2001      	movs	r0, #1
  40092c:	e7ec      	b.n	400908 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40092e:	f000 001f 	and.w	r0, r0, #31
  400932:	2601      	movs	r6, #1
  400934:	4086      	lsls	r6, r0
  400936:	4632      	mov	r2, r6
  400938:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40093c:	4620      	mov	r0, r4
  40093e:	4b19      	ldr	r3, [pc, #100]	; (4009a4 <pio_configure_pin+0x118>)
  400940:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400942:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400946:	bf14      	ite	ne
  400948:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40094a:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  40094c:	2001      	movs	r0, #1
  40094e:	e7db      	b.n	400908 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  400950:	f000 001f 	and.w	r0, r0, #31
  400954:	2601      	movs	r6, #1
  400956:	4086      	lsls	r6, r0
  400958:	4632      	mov	r2, r6
  40095a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40095e:	4620      	mov	r0, r4
  400960:	4b10      	ldr	r3, [pc, #64]	; (4009a4 <pio_configure_pin+0x118>)
  400962:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400964:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400968:	bf14      	ite	ne
  40096a:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40096c:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  40096e:	2001      	movs	r0, #1
  400970:	e7ca      	b.n	400908 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400972:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400976:	f000 011f 	and.w	r1, r0, #31
  40097a:	2601      	movs	r6, #1
  40097c:	ea05 0306 	and.w	r3, r5, r6
  400980:	9300      	str	r3, [sp, #0]
  400982:	f3c5 0380 	ubfx	r3, r5, #2, #1
  400986:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  40098a:	bf14      	ite	ne
  40098c:	2200      	movne	r2, #0
  40098e:	2201      	moveq	r2, #1
  400990:	fa06 f101 	lsl.w	r1, r6, r1
  400994:	4620      	mov	r0, r4
  400996:	4c04      	ldr	r4, [pc, #16]	; (4009a8 <pio_configure_pin+0x11c>)
  400998:	47a0      	blx	r4
	return 1;
  40099a:	4630      	mov	r0, r6
		break;
  40099c:	e7b4      	b.n	400908 <pio_configure_pin+0x7c>
  40099e:	bf00      	nop
  4009a0:	004007fb 	.word	0x004007fb
  4009a4:	0040076b 	.word	0x0040076b
  4009a8:	0040082d 	.word	0x0040082d

004009ac <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4009ac:	4a17      	ldr	r2, [pc, #92]	; (400a0c <pmc_switch_mck_to_pllack+0x60>)
  4009ae:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4009b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4009b4:	4318      	orrs	r0, r3
  4009b6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4009b8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4009ba:	f013 0f08 	tst.w	r3, #8
  4009be:	d10a      	bne.n	4009d6 <pmc_switch_mck_to_pllack+0x2a>
  4009c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4009c4:	4911      	ldr	r1, [pc, #68]	; (400a0c <pmc_switch_mck_to_pllack+0x60>)
  4009c6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4009c8:	f012 0f08 	tst.w	r2, #8
  4009cc:	d103      	bne.n	4009d6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4009ce:	3b01      	subs	r3, #1
  4009d0:	d1f9      	bne.n	4009c6 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4009d2:	2001      	movs	r0, #1
  4009d4:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4009d6:	4a0d      	ldr	r2, [pc, #52]	; (400a0c <pmc_switch_mck_to_pllack+0x60>)
  4009d8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4009da:	f023 0303 	bic.w	r3, r3, #3
  4009de:	f043 0302 	orr.w	r3, r3, #2
  4009e2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4009e4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4009e6:	f013 0f08 	tst.w	r3, #8
  4009ea:	d10a      	bne.n	400a02 <pmc_switch_mck_to_pllack+0x56>
  4009ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4009f0:	4906      	ldr	r1, [pc, #24]	; (400a0c <pmc_switch_mck_to_pllack+0x60>)
  4009f2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4009f4:	f012 0f08 	tst.w	r2, #8
  4009f8:	d105      	bne.n	400a06 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4009fa:	3b01      	subs	r3, #1
  4009fc:	d1f9      	bne.n	4009f2 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4009fe:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400a00:	4770      	bx	lr
	return 0;
  400a02:	2000      	movs	r0, #0
  400a04:	4770      	bx	lr
  400a06:	2000      	movs	r0, #0
  400a08:	4770      	bx	lr
  400a0a:	bf00      	nop
  400a0c:	400e0400 	.word	0x400e0400

00400a10 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400a10:	b9c8      	cbnz	r0, 400a46 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400a12:	4a11      	ldr	r2, [pc, #68]	; (400a58 <pmc_switch_mainck_to_xtal+0x48>)
  400a14:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400a16:	0209      	lsls	r1, r1, #8
  400a18:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400a1a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400a1e:	f023 0303 	bic.w	r3, r3, #3
  400a22:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400a26:	f043 0301 	orr.w	r3, r3, #1
  400a2a:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400a2c:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400a2e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400a30:	f013 0f01 	tst.w	r3, #1
  400a34:	d0fb      	beq.n	400a2e <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400a36:	4a08      	ldr	r2, [pc, #32]	; (400a58 <pmc_switch_mainck_to_xtal+0x48>)
  400a38:	6a13      	ldr	r3, [r2, #32]
  400a3a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400a42:	6213      	str	r3, [r2, #32]
  400a44:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400a46:	4904      	ldr	r1, [pc, #16]	; (400a58 <pmc_switch_mainck_to_xtal+0x48>)
  400a48:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400a4a:	4a04      	ldr	r2, [pc, #16]	; (400a5c <pmc_switch_mainck_to_xtal+0x4c>)
  400a4c:	401a      	ands	r2, r3
  400a4e:	4b04      	ldr	r3, [pc, #16]	; (400a60 <pmc_switch_mainck_to_xtal+0x50>)
  400a50:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400a52:	620b      	str	r3, [r1, #32]
  400a54:	4770      	bx	lr
  400a56:	bf00      	nop
  400a58:	400e0400 	.word	0x400e0400
  400a5c:	fec8fffc 	.word	0xfec8fffc
  400a60:	01370002 	.word	0x01370002

00400a64 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400a64:	4b02      	ldr	r3, [pc, #8]	; (400a70 <pmc_osc_is_ready_mainck+0xc>)
  400a66:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400a68:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400a6c:	4770      	bx	lr
  400a6e:	bf00      	nop
  400a70:	400e0400 	.word	0x400e0400

00400a74 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400a74:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400a78:	4b01      	ldr	r3, [pc, #4]	; (400a80 <pmc_disable_pllack+0xc>)
  400a7a:	629a      	str	r2, [r3, #40]	; 0x28
  400a7c:	4770      	bx	lr
  400a7e:	bf00      	nop
  400a80:	400e0400 	.word	0x400e0400

00400a84 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400a84:	4b02      	ldr	r3, [pc, #8]	; (400a90 <pmc_is_locked_pllack+0xc>)
  400a86:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400a88:	f000 0002 	and.w	r0, r0, #2
  400a8c:	4770      	bx	lr
  400a8e:	bf00      	nop
  400a90:	400e0400 	.word	0x400e0400

00400a94 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400a94:	2822      	cmp	r0, #34	; 0x22
  400a96:	d81e      	bhi.n	400ad6 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400a98:	281f      	cmp	r0, #31
  400a9a:	d80c      	bhi.n	400ab6 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400a9c:	4b11      	ldr	r3, [pc, #68]	; (400ae4 <pmc_enable_periph_clk+0x50>)
  400a9e:	699a      	ldr	r2, [r3, #24]
  400aa0:	2301      	movs	r3, #1
  400aa2:	4083      	lsls	r3, r0
  400aa4:	4393      	bics	r3, r2
  400aa6:	d018      	beq.n	400ada <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400aa8:	2301      	movs	r3, #1
  400aaa:	fa03 f000 	lsl.w	r0, r3, r0
  400aae:	4b0d      	ldr	r3, [pc, #52]	; (400ae4 <pmc_enable_periph_clk+0x50>)
  400ab0:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400ab2:	2000      	movs	r0, #0
  400ab4:	4770      	bx	lr
		ul_id -= 32;
  400ab6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400ab8:	4b0a      	ldr	r3, [pc, #40]	; (400ae4 <pmc_enable_periph_clk+0x50>)
  400aba:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400abe:	2301      	movs	r3, #1
  400ac0:	4083      	lsls	r3, r0
  400ac2:	4393      	bics	r3, r2
  400ac4:	d00b      	beq.n	400ade <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400ac6:	2301      	movs	r3, #1
  400ac8:	fa03 f000 	lsl.w	r0, r3, r0
  400acc:	4b05      	ldr	r3, [pc, #20]	; (400ae4 <pmc_enable_periph_clk+0x50>)
  400ace:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400ad2:	2000      	movs	r0, #0
  400ad4:	4770      	bx	lr
		return 1;
  400ad6:	2001      	movs	r0, #1
  400ad8:	4770      	bx	lr
	return 0;
  400ada:	2000      	movs	r0, #0
  400adc:	4770      	bx	lr
  400ade:	2000      	movs	r0, #0
}
  400ae0:	4770      	bx	lr
  400ae2:	bf00      	nop
  400ae4:	400e0400 	.word	0x400e0400

00400ae8 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  400ae8:	b510      	push	{r4, lr}
  400aea:	200b      	movs	r0, #11
  400aec:	4c0d      	ldr	r4, [pc, #52]	; (400b24 <board_init+0x3c>)
  400aee:	47a0      	blx	r4
  400af0:	200c      	movs	r0, #12
  400af2:	47a0      	blx	r4
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400af4:	4a0c      	ldr	r2, [pc, #48]	; (400b28 <board_init+0x40>)
  400af6:	2304      	movs	r3, #4
  400af8:	6153      	str	r3, [r2, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400afa:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400afe:	6353      	str	r3, [r2, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400b00:	490a      	ldr	r1, [pc, #40]	; (400b2c <board_init+0x44>)
  400b02:	2301      	movs	r3, #1
  400b04:	610b      	str	r3, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400b06:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400b0a:	634b      	str	r3, [r1, #52]	; 0x34
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400b0c:	2102      	movs	r1, #2
  400b0e:	6151      	str	r1, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400b10:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400b14:	6311      	str	r1, [r2, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400b16:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
  400b1a:	6153      	str	r3, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400b1c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400b20:	6353      	str	r3, [r2, #52]	; 0x34
  400b22:	bd10      	pop	{r4, pc}
  400b24:	00400a95 	.word	0x00400a95
  400b28:	400e0e00 	.word	0x400e0e00
  400b2c:	400e8e00 	.word	0x400e8e00

00400b30 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400b30:	e7fe      	b.n	400b30 <Dummy_Handler>
	...

00400b34 <Reset_Handler>:
{
  400b34:	b508      	push	{r3, lr}
	if (pSrc > pDest) {
  400b36:	4b21      	ldr	r3, [pc, #132]	; (400bbc <Reset_Handler+0x88>)
  400b38:	4a21      	ldr	r2, [pc, #132]	; (400bc0 <Reset_Handler+0x8c>)
  400b3a:	429a      	cmp	r2, r3
  400b3c:	d928      	bls.n	400b90 <Reset_Handler+0x5c>
		for (; pDest < &_erelocate;) {
  400b3e:	4b21      	ldr	r3, [pc, #132]	; (400bc4 <Reset_Handler+0x90>)
  400b40:	4a1e      	ldr	r2, [pc, #120]	; (400bbc <Reset_Handler+0x88>)
  400b42:	429a      	cmp	r2, r3
  400b44:	d20c      	bcs.n	400b60 <Reset_Handler+0x2c>
  400b46:	3b01      	subs	r3, #1
  400b48:	1a9b      	subs	r3, r3, r2
  400b4a:	f023 0303 	bic.w	r3, r3, #3
  400b4e:	3304      	adds	r3, #4
  400b50:	4413      	add	r3, r2
  400b52:	491b      	ldr	r1, [pc, #108]	; (400bc0 <Reset_Handler+0x8c>)
			*pDest++ = *pSrc++;
  400b54:	f851 0b04 	ldr.w	r0, [r1], #4
  400b58:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  400b5c:	429a      	cmp	r2, r3
  400b5e:	d1f9      	bne.n	400b54 <Reset_Handler+0x20>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  400b60:	bf00      	nop
	for (pDest = &_szero; pDest < &_ezero;) {
  400b62:	4b19      	ldr	r3, [pc, #100]	; (400bc8 <Reset_Handler+0x94>)
  400b64:	4a19      	ldr	r2, [pc, #100]	; (400bcc <Reset_Handler+0x98>)
  400b66:	429a      	cmp	r2, r3
  400b68:	d20a      	bcs.n	400b80 <Reset_Handler+0x4c>
  400b6a:	3b01      	subs	r3, #1
  400b6c:	1a9b      	subs	r3, r3, r2
  400b6e:	f023 0303 	bic.w	r3, r3, #3
  400b72:	3304      	adds	r3, #4
  400b74:	4413      	add	r3, r2
		*pDest++ = 0;
  400b76:	2100      	movs	r1, #0
  400b78:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  400b7c:	429a      	cmp	r2, r3
  400b7e:	d1fb      	bne.n	400b78 <Reset_Handler+0x44>
	SCB->VTOR = ((uint32_t) pSrc);
  400b80:	4b13      	ldr	r3, [pc, #76]	; (400bd0 <Reset_Handler+0x9c>)
  400b82:	4a14      	ldr	r2, [pc, #80]	; (400bd4 <Reset_Handler+0xa0>)
  400b84:	609a      	str	r2, [r3, #8]
	__libc_init_array();
  400b86:	4b14      	ldr	r3, [pc, #80]	; (400bd8 <Reset_Handler+0xa4>)
  400b88:	4798      	blx	r3
	main();
  400b8a:	4b14      	ldr	r3, [pc, #80]	; (400bdc <Reset_Handler+0xa8>)
  400b8c:	4798      	blx	r3
  400b8e:	e7fe      	b.n	400b8e <Reset_Handler+0x5a>
	} else if (pSrc < pDest) {
  400b90:	4b0a      	ldr	r3, [pc, #40]	; (400bbc <Reset_Handler+0x88>)
  400b92:	4a0b      	ldr	r2, [pc, #44]	; (400bc0 <Reset_Handler+0x8c>)
  400b94:	429a      	cmp	r2, r3
  400b96:	d2e3      	bcs.n	400b60 <Reset_Handler+0x2c>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  400b98:	4b0a      	ldr	r3, [pc, #40]	; (400bc4 <Reset_Handler+0x90>)
  400b9a:	4808      	ldr	r0, [pc, #32]	; (400bbc <Reset_Handler+0x88>)
  400b9c:	1a18      	subs	r0, r3, r0
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  400b9e:	4611      	mov	r1, r2
  400ba0:	3a04      	subs	r2, #4
  400ba2:	4402      	add	r2, r0
		for (;nb_bytes;nb_bytes -= 4) {
  400ba4:	2800      	cmp	r0, #0
  400ba6:	d0db      	beq.n	400b60 <Reset_Handler+0x2c>
  400ba8:	f1c1 0104 	rsb	r1, r1, #4
			*pDest-- = *pSrc--;
  400bac:	f852 0904 	ldr.w	r0, [r2], #-4
  400bb0:	f843 0d04 	str.w	r0, [r3, #-4]!
		for (;nb_bytes;nb_bytes -= 4) {
  400bb4:	42ca      	cmn	r2, r1
  400bb6:	d1f9      	bne.n	400bac <Reset_Handler+0x78>
  400bb8:	e7d2      	b.n	400b60 <Reset_Handler+0x2c>
  400bba:	bf00      	nop
  400bbc:	20000000 	.word	0x20000000
  400bc0:	00401644 	.word	0x00401644
  400bc4:	20000434 	.word	0x20000434
  400bc8:	200008fc 	.word	0x200008fc
  400bcc:	20000434 	.word	0x20000434
  400bd0:	e000ed00 	.word	0xe000ed00
  400bd4:	00400000 	.word	0x00400000
  400bd8:	00400db9 	.word	0x00400db9
  400bdc:	00400d65 	.word	0x00400d65

00400be0 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  400be0:	4b3c      	ldr	r3, [pc, #240]	; (400cd4 <SystemCoreClockUpdate+0xf4>)
  400be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400be4:	f003 0303 	and.w	r3, r3, #3
  400be8:	2b03      	cmp	r3, #3
  400bea:	d80e      	bhi.n	400c0a <SystemCoreClockUpdate+0x2a>
  400bec:	e8df f003 	tbb	[pc, r3]
  400bf0:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400bf4:	4b38      	ldr	r3, [pc, #224]	; (400cd8 <SystemCoreClockUpdate+0xf8>)
  400bf6:	695b      	ldr	r3, [r3, #20]
  400bf8:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400bfc:	bf14      	ite	ne
  400bfe:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400c02:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400c06:	4b35      	ldr	r3, [pc, #212]	; (400cdc <SystemCoreClockUpdate+0xfc>)
  400c08:	601a      	str	r2, [r3, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  400c0a:	4b32      	ldr	r3, [pc, #200]	; (400cd4 <SystemCoreClockUpdate+0xf4>)
  400c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400c0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400c12:	2b70      	cmp	r3, #112	; 0x70
  400c14:	d055      	beq.n	400cc2 <SystemCoreClockUpdate+0xe2>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400c16:	4b2f      	ldr	r3, [pc, #188]	; (400cd4 <SystemCoreClockUpdate+0xf4>)
  400c18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		SystemCoreClock >>=
  400c1a:	4930      	ldr	r1, [pc, #192]	; (400cdc <SystemCoreClockUpdate+0xfc>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400c1c:	f3c2 1202 	ubfx	r2, r2, #4, #3
		SystemCoreClock >>=
  400c20:	680b      	ldr	r3, [r1, #0]
  400c22:	40d3      	lsrs	r3, r2
  400c24:	600b      	str	r3, [r1, #0]
  400c26:	4770      	bx	lr
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400c28:	4b2a      	ldr	r3, [pc, #168]	; (400cd4 <SystemCoreClockUpdate+0xf4>)
  400c2a:	6a1b      	ldr	r3, [r3, #32]
  400c2c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400c30:	d003      	beq.n	400c3a <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL;
  400c32:	4a2b      	ldr	r2, [pc, #172]	; (400ce0 <SystemCoreClockUpdate+0x100>)
  400c34:	4b29      	ldr	r3, [pc, #164]	; (400cdc <SystemCoreClockUpdate+0xfc>)
  400c36:	601a      	str	r2, [r3, #0]
  400c38:	e7e7      	b.n	400c0a <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400c3a:	4a2a      	ldr	r2, [pc, #168]	; (400ce4 <SystemCoreClockUpdate+0x104>)
  400c3c:	4b27      	ldr	r3, [pc, #156]	; (400cdc <SystemCoreClockUpdate+0xfc>)
  400c3e:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400c40:	4b24      	ldr	r3, [pc, #144]	; (400cd4 <SystemCoreClockUpdate+0xf4>)
  400c42:	6a1b      	ldr	r3, [r3, #32]
  400c44:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400c48:	2b10      	cmp	r3, #16
  400c4a:	d005      	beq.n	400c58 <SystemCoreClockUpdate+0x78>
  400c4c:	2b20      	cmp	r3, #32
  400c4e:	d1dc      	bne.n	400c0a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400c50:	4a23      	ldr	r2, [pc, #140]	; (400ce0 <SystemCoreClockUpdate+0x100>)
  400c52:	4b22      	ldr	r3, [pc, #136]	; (400cdc <SystemCoreClockUpdate+0xfc>)
  400c54:	601a      	str	r2, [r3, #0]
			break;
  400c56:	e7d8      	b.n	400c0a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400c58:	4a23      	ldr	r2, [pc, #140]	; (400ce8 <SystemCoreClockUpdate+0x108>)
  400c5a:	4b20      	ldr	r3, [pc, #128]	; (400cdc <SystemCoreClockUpdate+0xfc>)
  400c5c:	601a      	str	r2, [r3, #0]
			break;
  400c5e:	e7d4      	b.n	400c0a <SystemCoreClockUpdate+0x2a>
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400c60:	4b1c      	ldr	r3, [pc, #112]	; (400cd4 <SystemCoreClockUpdate+0xf4>)
  400c62:	6a1b      	ldr	r3, [r3, #32]
  400c64:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400c68:	d018      	beq.n	400c9c <SystemCoreClockUpdate+0xbc>
				SystemCoreClock = CHIP_FREQ_XTAL;
  400c6a:	4a1d      	ldr	r2, [pc, #116]	; (400ce0 <SystemCoreClockUpdate+0x100>)
  400c6c:	4b1b      	ldr	r3, [pc, #108]	; (400cdc <SystemCoreClockUpdate+0xfc>)
  400c6e:	601a      	str	r2, [r3, #0]
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  400c70:	4b18      	ldr	r3, [pc, #96]	; (400cd4 <SystemCoreClockUpdate+0xf4>)
  400c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400c74:	f003 0303 	and.w	r3, r3, #3
  400c78:	2b02      	cmp	r3, #2
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  400c7a:	4a16      	ldr	r2, [pc, #88]	; (400cd4 <SystemCoreClockUpdate+0xf4>)
  400c7c:	bf07      	ittee	eq
  400c7e:	6a91      	ldreq	r1, [r2, #40]	; 0x28
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  400c80:	6a92      	ldreq	r2, [r2, #40]	; 0x28
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400c82:	6ad1      	ldrne	r1, [r2, #44]	; 0x2c
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400c84:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  400c86:	4815      	ldr	r0, [pc, #84]	; (400cdc <SystemCoreClockUpdate+0xfc>)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  400c88:	f3c1 410a 	ubfx	r1, r1, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400c8c:	6803      	ldr	r3, [r0, #0]
  400c8e:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_DIVB_Pos));
  400c92:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400c94:	fbb3 f3f2 	udiv	r3, r3, r2
  400c98:	6003      	str	r3, [r0, #0]
  400c9a:	e7b6      	b.n	400c0a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400c9c:	4a11      	ldr	r2, [pc, #68]	; (400ce4 <SystemCoreClockUpdate+0x104>)
  400c9e:	4b0f      	ldr	r3, [pc, #60]	; (400cdc <SystemCoreClockUpdate+0xfc>)
  400ca0:	601a      	str	r2, [r3, #0]
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400ca2:	4b0c      	ldr	r3, [pc, #48]	; (400cd4 <SystemCoreClockUpdate+0xf4>)
  400ca4:	6a1b      	ldr	r3, [r3, #32]
  400ca6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400caa:	2b10      	cmp	r3, #16
  400cac:	d005      	beq.n	400cba <SystemCoreClockUpdate+0xda>
  400cae:	2b20      	cmp	r3, #32
  400cb0:	d1de      	bne.n	400c70 <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400cb2:	4a0b      	ldr	r2, [pc, #44]	; (400ce0 <SystemCoreClockUpdate+0x100>)
  400cb4:	4b09      	ldr	r3, [pc, #36]	; (400cdc <SystemCoreClockUpdate+0xfc>)
  400cb6:	601a      	str	r2, [r3, #0]
					break;
  400cb8:	e7da      	b.n	400c70 <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400cba:	4a0b      	ldr	r2, [pc, #44]	; (400ce8 <SystemCoreClockUpdate+0x108>)
  400cbc:	4b07      	ldr	r3, [pc, #28]	; (400cdc <SystemCoreClockUpdate+0xfc>)
  400cbe:	601a      	str	r2, [r3, #0]
					break;
  400cc0:	e7d6      	b.n	400c70 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  400cc2:	4a06      	ldr	r2, [pc, #24]	; (400cdc <SystemCoreClockUpdate+0xfc>)
  400cc4:	6813      	ldr	r3, [r2, #0]
  400cc6:	4909      	ldr	r1, [pc, #36]	; (400cec <SystemCoreClockUpdate+0x10c>)
  400cc8:	fba1 1303 	umull	r1, r3, r1, r3
  400ccc:	085b      	lsrs	r3, r3, #1
  400cce:	6013      	str	r3, [r2, #0]
  400cd0:	4770      	bx	lr
  400cd2:	bf00      	nop
  400cd4:	400e0400 	.word	0x400e0400
  400cd8:	400e1410 	.word	0x400e1410
  400cdc:	20000000 	.word	0x20000000
  400ce0:	00b71b00 	.word	0x00b71b00
  400ce4:	003d0900 	.word	0x003d0900
  400ce8:	007a1200 	.word	0x007a1200
  400cec:	aaaaaaab 	.word	0xaaaaaaab

00400cf0 <system_init_flash>:
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400cf0:	4b12      	ldr	r3, [pc, #72]	; (400d3c <system_init_flash+0x4c>)
  400cf2:	4298      	cmp	r0, r3
  400cf4:	d911      	bls.n	400d1a <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  400cf6:	4b12      	ldr	r3, [pc, #72]	; (400d40 <system_init_flash+0x50>)
  400cf8:	4298      	cmp	r0, r3
  400cfa:	d913      	bls.n	400d24 <system_init_flash+0x34>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  400cfc:	4b11      	ldr	r3, [pc, #68]	; (400d44 <system_init_flash+0x54>)
  400cfe:	4298      	cmp	r0, r3
  400d00:	d914      	bls.n	400d2c <system_init_flash+0x3c>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400d02:	4b11      	ldr	r3, [pc, #68]	; (400d48 <system_init_flash+0x58>)
  400d04:	4298      	cmp	r0, r3
  400d06:	d915      	bls.n	400d34 <system_init_flash+0x44>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400d08:	4b10      	ldr	r3, [pc, #64]	; (400d4c <system_init_flash+0x5c>)
  400d0a:	4298      	cmp	r0, r3
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400d0c:	bf94      	ite	ls
  400d0e:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400d12:	4a0f      	ldrhi	r2, [pc, #60]	; (400d50 <system_init_flash+0x60>)
  400d14:	4b0f      	ldr	r3, [pc, #60]	; (400d54 <system_init_flash+0x64>)
  400d16:	601a      	str	r2, [r3, #0]
  400d18:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400d1a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400d1e:	4b0d      	ldr	r3, [pc, #52]	; (400d54 <system_init_flash+0x64>)
  400d20:	601a      	str	r2, [r3, #0]
  400d22:	4770      	bx	lr
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400d24:	4a0c      	ldr	r2, [pc, #48]	; (400d58 <system_init_flash+0x68>)
  400d26:	4b0b      	ldr	r3, [pc, #44]	; (400d54 <system_init_flash+0x64>)
  400d28:	601a      	str	r2, [r3, #0]
  400d2a:	4770      	bx	lr
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400d2c:	4a0b      	ldr	r2, [pc, #44]	; (400d5c <system_init_flash+0x6c>)
  400d2e:	4b09      	ldr	r3, [pc, #36]	; (400d54 <system_init_flash+0x64>)
  400d30:	601a      	str	r2, [r3, #0]
  400d32:	4770      	bx	lr
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400d34:	4a0a      	ldr	r2, [pc, #40]	; (400d60 <system_init_flash+0x70>)
  400d36:	4b07      	ldr	r3, [pc, #28]	; (400d54 <system_init_flash+0x64>)
  400d38:	601a      	str	r2, [r3, #0]
  400d3a:	4770      	bx	lr
  400d3c:	01312cff 	.word	0x01312cff
  400d40:	026259ff 	.word	0x026259ff
  400d44:	039386ff 	.word	0x039386ff
  400d48:	04c4b3ff 	.word	0x04c4b3ff
  400d4c:	05f5e0ff 	.word	0x05f5e0ff
  400d50:	04000500 	.word	0x04000500
  400d54:	400e0a00 	.word	0x400e0a00
  400d58:	04000100 	.word	0x04000100
  400d5c:	04000200 	.word	0x04000200
  400d60:	04000300 	.word	0x04000300

00400d64 <main>:
//#include "camera.h"
#include "timer_interface.h"


int main (void)
{
  400d64:	b508      	push	{r3, lr}
	// boilerplate
	sysclk_init();
  400d66:	4b0a      	ldr	r3, [pc, #40]	; (400d90 <main+0x2c>)
  400d68:	4798      	blx	r3
	wdt_disable(WDT);
  400d6a:	480a      	ldr	r0, [pc, #40]	; (400d94 <main+0x30>)
  400d6c:	4b0a      	ldr	r3, [pc, #40]	; (400d98 <main+0x34>)
  400d6e:	4798      	blx	r3
	board_init();
  400d70:	4b0a      	ldr	r3, [pc, #40]	; (400d9c <main+0x38>)
  400d72:	4798      	blx	r3
	
	configure_tc();
  400d74:	4b0a      	ldr	r3, [pc, #40]	; (400da0 <main+0x3c>)
  400d76:	4798      	blx	r3
	tc_start(TC0, 0);
  400d78:	2100      	movs	r1, #0
  400d7a:	480a      	ldr	r0, [pc, #40]	; (400da4 <main+0x40>)
  400d7c:	4b0a      	ldr	r3, [pc, #40]	; (400da8 <main+0x44>)
  400d7e:	4798      	blx	r3
	
	// Configure all of the wifi stuff
	configure_usart_wifi();
  400d80:	4b0a      	ldr	r3, [pc, #40]	; (400dac <main+0x48>)
  400d82:	4798      	blx	r3
	configure_wifi_comm_pin();
  400d84:	4b0a      	ldr	r3, [pc, #40]	; (400db0 <main+0x4c>)
  400d86:	4798      	blx	r3
	configure_wifi_web_setup_pin();
  400d88:	4b0a      	ldr	r3, [pc, #40]	; (400db4 <main+0x50>)
  400d8a:	4798      	blx	r3
	
	//send the image to wifi if length is nonzero
	/*if(find_image_len()){
		//send image to wifi
	}*/
}
  400d8c:	2000      	movs	r0, #0
  400d8e:	bd08      	pop	{r3, pc}
  400d90:	004006ed 	.word	0x004006ed
  400d94:	400e1450 	.word	0x400e1450
  400d98:	004001e1 	.word	0x004001e1
  400d9c:	00400ae9 	.word	0x00400ae9
  400da0:	00400211 	.word	0x00400211
  400da4:	40010000 	.word	0x40010000
  400da8:	00400151 	.word	0x00400151
  400dac:	00400361 	.word	0x00400361
  400db0:	00400409 	.word	0x00400409
  400db4:	00400465 	.word	0x00400465

00400db8 <__libc_init_array>:
  400db8:	b570      	push	{r4, r5, r6, lr}
  400dba:	4e0f      	ldr	r6, [pc, #60]	; (400df8 <__libc_init_array+0x40>)
  400dbc:	4d0f      	ldr	r5, [pc, #60]	; (400dfc <__libc_init_array+0x44>)
  400dbe:	1b76      	subs	r6, r6, r5
  400dc0:	10b6      	asrs	r6, r6, #2
  400dc2:	bf18      	it	ne
  400dc4:	2400      	movne	r4, #0
  400dc6:	d005      	beq.n	400dd4 <__libc_init_array+0x1c>
  400dc8:	3401      	adds	r4, #1
  400dca:	f855 3b04 	ldr.w	r3, [r5], #4
  400dce:	4798      	blx	r3
  400dd0:	42a6      	cmp	r6, r4
  400dd2:	d1f9      	bne.n	400dc8 <__libc_init_array+0x10>
  400dd4:	4e0a      	ldr	r6, [pc, #40]	; (400e00 <__libc_init_array+0x48>)
  400dd6:	4d0b      	ldr	r5, [pc, #44]	; (400e04 <__libc_init_array+0x4c>)
  400dd8:	1b76      	subs	r6, r6, r5
  400dda:	f000 fc21 	bl	401620 <_init>
  400dde:	10b6      	asrs	r6, r6, #2
  400de0:	bf18      	it	ne
  400de2:	2400      	movne	r4, #0
  400de4:	d006      	beq.n	400df4 <__libc_init_array+0x3c>
  400de6:	3401      	adds	r4, #1
  400de8:	f855 3b04 	ldr.w	r3, [r5], #4
  400dec:	4798      	blx	r3
  400dee:	42a6      	cmp	r6, r4
  400df0:	d1f9      	bne.n	400de6 <__libc_init_array+0x2e>
  400df2:	bd70      	pop	{r4, r5, r6, pc}
  400df4:	bd70      	pop	{r4, r5, r6, pc}
  400df6:	bf00      	nop
  400df8:	0040162c 	.word	0x0040162c
  400dfc:	0040162c 	.word	0x0040162c
  400e00:	00401634 	.word	0x00401634
  400e04:	0040162c 	.word	0x0040162c

00400e08 <critical_factorization>:
  400e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400e0c:	f04f 0e01 	mov.w	lr, #1
  400e10:	4674      	mov	r4, lr
  400e12:	2500      	movs	r5, #0
  400e14:	f04f 36ff 	mov.w	r6, #4294967295
  400e18:	192b      	adds	r3, r5, r4
  400e1a:	428b      	cmp	r3, r1
  400e1c:	eb00 0706 	add.w	r7, r0, r6
  400e20:	d20d      	bcs.n	400e3e <critical_factorization+0x36>
  400e22:	5d3f      	ldrb	r7, [r7, r4]
  400e24:	f810 c003 	ldrb.w	ip, [r0, r3]
  400e28:	45bc      	cmp	ip, r7
  400e2a:	d22d      	bcs.n	400e88 <critical_factorization+0x80>
  400e2c:	461d      	mov	r5, r3
  400e2e:	2401      	movs	r4, #1
  400e30:	eba3 0e06 	sub.w	lr, r3, r6
  400e34:	192b      	adds	r3, r5, r4
  400e36:	428b      	cmp	r3, r1
  400e38:	eb00 0706 	add.w	r7, r0, r6
  400e3c:	d3f1      	bcc.n	400e22 <critical_factorization+0x1a>
  400e3e:	f04f 0801 	mov.w	r8, #1
  400e42:	f8c2 e000 	str.w	lr, [r2]
  400e46:	4644      	mov	r4, r8
  400e48:	2500      	movs	r5, #0
  400e4a:	f04f 37ff 	mov.w	r7, #4294967295
  400e4e:	192b      	adds	r3, r5, r4
  400e50:	4299      	cmp	r1, r3
  400e52:	eb00 0e07 	add.w	lr, r0, r7
  400e56:	d90e      	bls.n	400e76 <critical_factorization+0x6e>
  400e58:	f81e e004 	ldrb.w	lr, [lr, r4]
  400e5c:	f810 c003 	ldrb.w	ip, [r0, r3]
  400e60:	45f4      	cmp	ip, lr
  400e62:	d918      	bls.n	400e96 <critical_factorization+0x8e>
  400e64:	461d      	mov	r5, r3
  400e66:	2401      	movs	r4, #1
  400e68:	eba3 0807 	sub.w	r8, r3, r7
  400e6c:	192b      	adds	r3, r5, r4
  400e6e:	4299      	cmp	r1, r3
  400e70:	eb00 0e07 	add.w	lr, r0, r7
  400e74:	d8f0      	bhi.n	400e58 <critical_factorization+0x50>
  400e76:	3701      	adds	r7, #1
  400e78:	1c70      	adds	r0, r6, #1
  400e7a:	4287      	cmp	r7, r0
  400e7c:	bf24      	itt	cs
  400e7e:	f8c2 8000 	strcs.w	r8, [r2]
  400e82:	4638      	movcs	r0, r7
  400e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400e88:	d00c      	beq.n	400ea4 <critical_factorization+0x9c>
  400e8a:	f04f 0e01 	mov.w	lr, #1
  400e8e:	462e      	mov	r6, r5
  400e90:	4674      	mov	r4, lr
  400e92:	4475      	add	r5, lr
  400e94:	e7c0      	b.n	400e18 <critical_factorization+0x10>
  400e96:	d00b      	beq.n	400eb0 <critical_factorization+0xa8>
  400e98:	f04f 0801 	mov.w	r8, #1
  400e9c:	462f      	mov	r7, r5
  400e9e:	4644      	mov	r4, r8
  400ea0:	4445      	add	r5, r8
  400ea2:	e7d4      	b.n	400e4e <critical_factorization+0x46>
  400ea4:	4574      	cmp	r4, lr
  400ea6:	bf12      	itee	ne
  400ea8:	3401      	addne	r4, #1
  400eaa:	461d      	moveq	r5, r3
  400eac:	2401      	moveq	r4, #1
  400eae:	e7b3      	b.n	400e18 <critical_factorization+0x10>
  400eb0:	4544      	cmp	r4, r8
  400eb2:	bf12      	itee	ne
  400eb4:	3401      	addne	r4, #1
  400eb6:	461d      	moveq	r5, r3
  400eb8:	2401      	moveq	r4, #1
  400eba:	e7c8      	b.n	400e4e <critical_factorization+0x46>

00400ebc <two_way_long_needle>:
  400ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400ec0:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  400ec4:	4616      	mov	r6, r2
  400ec6:	4605      	mov	r5, r0
  400ec8:	468b      	mov	fp, r1
  400eca:	4610      	mov	r0, r2
  400ecc:	4619      	mov	r1, r3
  400ece:	aa03      	add	r2, sp, #12
  400ed0:	461c      	mov	r4, r3
  400ed2:	f7ff ff99 	bl	400e08 <critical_factorization>
  400ed6:	ab03      	add	r3, sp, #12
  400ed8:	4681      	mov	r9, r0
  400eda:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  400ede:	f843 4f04 	str.w	r4, [r3, #4]!
  400ee2:	4293      	cmp	r3, r2
  400ee4:	d1fb      	bne.n	400ede <two_way_long_needle+0x22>
  400ee6:	b14c      	cbz	r4, 400efc <two_way_long_needle+0x40>
  400ee8:	1e63      	subs	r3, r4, #1
  400eea:	1e72      	subs	r2, r6, #1
  400eec:	a804      	add	r0, sp, #16
  400eee:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  400ef2:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  400ef6:	f113 33ff 	adds.w	r3, r3, #4294967295
  400efa:	d2f8      	bcs.n	400eee <two_way_long_needle+0x32>
  400efc:	9903      	ldr	r1, [sp, #12]
  400efe:	464a      	mov	r2, r9
  400f00:	4431      	add	r1, r6
  400f02:	4630      	mov	r0, r6
  400f04:	f000 fa64 	bl	4013d0 <memcmp>
  400f08:	2800      	cmp	r0, #0
  400f0a:	d16f      	bne.n	400fec <two_way_long_needle+0x130>
  400f0c:	f109 33ff 	add.w	r3, r9, #4294967295
  400f10:	9300      	str	r3, [sp, #0]
  400f12:	18f3      	adds	r3, r6, r3
  400f14:	4682      	mov	sl, r0
  400f16:	9301      	str	r3, [sp, #4]
  400f18:	4623      	mov	r3, r4
  400f1a:	4680      	mov	r8, r0
  400f1c:	4654      	mov	r4, sl
  400f1e:	4658      	mov	r0, fp
  400f20:	469a      	mov	sl, r3
  400f22:	eb08 070a 	add.w	r7, r8, sl
  400f26:	1a3a      	subs	r2, r7, r0
  400f28:	2100      	movs	r1, #0
  400f2a:	4428      	add	r0, r5
  400f2c:	f000 fa00 	bl	401330 <memchr>
  400f30:	2800      	cmp	r0, #0
  400f32:	d156      	bne.n	400fe2 <two_way_long_needle+0x126>
  400f34:	2f00      	cmp	r7, #0
  400f36:	d054      	beq.n	400fe2 <two_way_long_needle+0x126>
  400f38:	19eb      	adds	r3, r5, r7
  400f3a:	aa04      	add	r2, sp, #16
  400f3c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  400f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  400f44:	b14b      	cbz	r3, 400f5a <two_way_long_needle+0x9e>
  400f46:	b124      	cbz	r4, 400f52 <two_way_long_needle+0x96>
  400f48:	9a03      	ldr	r2, [sp, #12]
  400f4a:	4293      	cmp	r3, r2
  400f4c:	d201      	bcs.n	400f52 <two_way_long_needle+0x96>
  400f4e:	ebaa 0302 	sub.w	r3, sl, r2
  400f52:	4498      	add	r8, r3
  400f54:	2400      	movs	r4, #0
  400f56:	4638      	mov	r0, r7
  400f58:	e7e3      	b.n	400f22 <two_way_long_needle+0x66>
  400f5a:	454c      	cmp	r4, r9
  400f5c:	4623      	mov	r3, r4
  400f5e:	f10a 3eff 	add.w	lr, sl, #4294967295
  400f62:	bf38      	it	cc
  400f64:	464b      	movcc	r3, r9
  400f66:	4573      	cmp	r3, lr
  400f68:	d213      	bcs.n	400f92 <two_way_long_needle+0xd6>
  400f6a:	eb08 0203 	add.w	r2, r8, r3
  400f6e:	f816 c003 	ldrb.w	ip, [r6, r3]
  400f72:	5ca8      	ldrb	r0, [r5, r2]
  400f74:	4584      	cmp	ip, r0
  400f76:	442a      	add	r2, r5
  400f78:	eb06 0103 	add.w	r1, r6, r3
  400f7c:	d006      	beq.n	400f8c <two_way_long_needle+0xd0>
  400f7e:	e02c      	b.n	400fda <two_way_long_needle+0x11e>
  400f80:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  400f84:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  400f88:	4584      	cmp	ip, r0
  400f8a:	d126      	bne.n	400fda <two_way_long_needle+0x11e>
  400f8c:	3301      	adds	r3, #1
  400f8e:	4573      	cmp	r3, lr
  400f90:	d3f6      	bcc.n	400f80 <two_way_long_needle+0xc4>
  400f92:	454c      	cmp	r4, r9
  400f94:	9900      	ldr	r1, [sp, #0]
  400f96:	f080 8089 	bcs.w	4010ac <two_way_long_needle+0x1f0>
  400f9a:	9b00      	ldr	r3, [sp, #0]
  400f9c:	eb08 0203 	add.w	r2, r8, r3
  400fa0:	9b01      	ldr	r3, [sp, #4]
  400fa2:	5ca8      	ldrb	r0, [r5, r2]
  400fa4:	781b      	ldrb	r3, [r3, #0]
  400fa6:	4298      	cmp	r0, r3
  400fa8:	442a      	add	r2, r5
  400faa:	d17f      	bne.n	4010ac <two_way_long_needle+0x1f0>
  400fac:	9801      	ldr	r0, [sp, #4]
  400fae:	f104 3bff 	add.w	fp, r4, #4294967295
  400fb2:	e006      	b.n	400fc2 <two_way_long_needle+0x106>
  400fb4:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  400fb8:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  400fbc:	45f4      	cmp	ip, lr
  400fbe:	d103      	bne.n	400fc8 <two_way_long_needle+0x10c>
  400fc0:	4619      	mov	r1, r3
  400fc2:	1e4b      	subs	r3, r1, #1
  400fc4:	459b      	cmp	fp, r3
  400fc6:	d1f5      	bne.n	400fb4 <two_way_long_needle+0xf8>
  400fc8:	3401      	adds	r4, #1
  400fca:	428c      	cmp	r4, r1
  400fcc:	d870      	bhi.n	4010b0 <two_way_long_needle+0x1f4>
  400fce:	9c03      	ldr	r4, [sp, #12]
  400fd0:	4638      	mov	r0, r7
  400fd2:	44a0      	add	r8, r4
  400fd4:	ebaa 0404 	sub.w	r4, sl, r4
  400fd8:	e7a3      	b.n	400f22 <two_way_long_needle+0x66>
  400fda:	f1c9 0201 	rsb	r2, r9, #1
  400fde:	4490      	add	r8, r2
  400fe0:	e7b7      	b.n	400f52 <two_way_long_needle+0x96>
  400fe2:	2000      	movs	r0, #0
  400fe4:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  400fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400fec:	eba4 0309 	sub.w	r3, r4, r9
  400ff0:	454b      	cmp	r3, r9
  400ff2:	bf38      	it	cc
  400ff4:	464b      	movcc	r3, r9
  400ff6:	3301      	adds	r3, #1
  400ff8:	f109 38ff 	add.w	r8, r9, #4294967295
  400ffc:	9303      	str	r3, [sp, #12]
  400ffe:	eb06 0308 	add.w	r3, r6, r8
  401002:	4658      	mov	r0, fp
  401004:	f04f 0a00 	mov.w	sl, #0
  401008:	46cb      	mov	fp, r9
  40100a:	4699      	mov	r9, r3
  40100c:	eb0a 0704 	add.w	r7, sl, r4
  401010:	1a3a      	subs	r2, r7, r0
  401012:	2100      	movs	r1, #0
  401014:	4428      	add	r0, r5
  401016:	f000 f98b 	bl	401330 <memchr>
  40101a:	2800      	cmp	r0, #0
  40101c:	d1e1      	bne.n	400fe2 <two_way_long_needle+0x126>
  40101e:	2f00      	cmp	r7, #0
  401020:	d0df      	beq.n	400fe2 <two_way_long_needle+0x126>
  401022:	19eb      	adds	r3, r5, r7
  401024:	aa04      	add	r2, sp, #16
  401026:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  40102a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40102e:	bba3      	cbnz	r3, 40109a <two_way_long_needle+0x1de>
  401030:	1e61      	subs	r1, r4, #1
  401032:	458b      	cmp	fp, r1
  401034:	d215      	bcs.n	401062 <two_way_long_needle+0x1a6>
  401036:	eb0a 020b 	add.w	r2, sl, fp
  40103a:	f816 300b 	ldrb.w	r3, [r6, fp]
  40103e:	f815 e002 	ldrb.w	lr, [r5, r2]
  401042:	459e      	cmp	lr, r3
  401044:	442a      	add	r2, r5
  401046:	eb06 000b 	add.w	r0, r6, fp
  40104a:	465b      	mov	r3, fp
  40104c:	d006      	beq.n	40105c <two_way_long_needle+0x1a0>
  40104e:	e027      	b.n	4010a0 <two_way_long_needle+0x1e4>
  401050:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  401054:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  401058:	45f4      	cmp	ip, lr
  40105a:	d121      	bne.n	4010a0 <two_way_long_needle+0x1e4>
  40105c:	3301      	adds	r3, #1
  40105e:	428b      	cmp	r3, r1
  401060:	d3f6      	bcc.n	401050 <two_way_long_needle+0x194>
  401062:	f1b8 3fff 	cmp.w	r8, #4294967295
  401066:	d011      	beq.n	40108c <two_way_long_needle+0x1d0>
  401068:	eb0a 0208 	add.w	r2, sl, r8
  40106c:	f899 1000 	ldrb.w	r1, [r9]
  401070:	5cab      	ldrb	r3, [r5, r2]
  401072:	4299      	cmp	r1, r3
  401074:	442a      	add	r2, r5
  401076:	d10f      	bne.n	401098 <two_way_long_needle+0x1dc>
  401078:	464b      	mov	r3, r9
  40107a:	e005      	b.n	401088 <two_way_long_needle+0x1cc>
  40107c:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  401080:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  401084:	4288      	cmp	r0, r1
  401086:	d107      	bne.n	401098 <two_way_long_needle+0x1dc>
  401088:	42b3      	cmp	r3, r6
  40108a:	d1f7      	bne.n	40107c <two_way_long_needle+0x1c0>
  40108c:	eb05 000a 	add.w	r0, r5, sl
  401090:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  401094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401098:	9b03      	ldr	r3, [sp, #12]
  40109a:	449a      	add	sl, r3
  40109c:	4638      	mov	r0, r7
  40109e:	e7b5      	b.n	40100c <two_way_long_needle+0x150>
  4010a0:	f1cb 0201 	rsb	r2, fp, #1
  4010a4:	4492      	add	sl, r2
  4010a6:	449a      	add	sl, r3
  4010a8:	4638      	mov	r0, r7
  4010aa:	e7af      	b.n	40100c <two_way_long_needle+0x150>
  4010ac:	4649      	mov	r1, r9
  4010ae:	e78b      	b.n	400fc8 <two_way_long_needle+0x10c>
  4010b0:	eb05 0008 	add.w	r0, r5, r8
  4010b4:	e796      	b.n	400fe4 <two_way_long_needle+0x128>
  4010b6:	bf00      	nop

004010b8 <strstr>:
  4010b8:	7802      	ldrb	r2, [r0, #0]
  4010ba:	2a00      	cmp	r2, #0
  4010bc:	f000 8101 	beq.w	4012c2 <strstr+0x20a>
  4010c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4010c4:	f891 8000 	ldrb.w	r8, [r1]
  4010c8:	b085      	sub	sp, #20
  4010ca:	4644      	mov	r4, r8
  4010cc:	f1b8 0f00 	cmp.w	r8, #0
  4010d0:	d016      	beq.n	401100 <strstr+0x48>
  4010d2:	4686      	mov	lr, r0
  4010d4:	f101 0c01 	add.w	ip, r1, #1
  4010d8:	2701      	movs	r7, #1
  4010da:	e003      	b.n	4010e4 <strstr+0x2c>
  4010dc:	f813 4b01 	ldrb.w	r4, [r3], #1
  4010e0:	b16c      	cbz	r4, 4010fe <strstr+0x46>
  4010e2:	469c      	mov	ip, r3
  4010e4:	42a2      	cmp	r2, r4
  4010e6:	bf14      	ite	ne
  4010e8:	2700      	movne	r7, #0
  4010ea:	f007 0701 	andeq.w	r7, r7, #1
  4010ee:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
  4010f2:	4663      	mov	r3, ip
  4010f4:	2a00      	cmp	r2, #0
  4010f6:	d1f1      	bne.n	4010dc <strstr+0x24>
  4010f8:	f89c 3000 	ldrb.w	r3, [ip]
  4010fc:	b9fb      	cbnz	r3, 40113e <strstr+0x86>
  4010fe:	b117      	cbz	r7, 401106 <strstr+0x4e>
  401100:	b005      	add	sp, #20
  401102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401106:	460e      	mov	r6, r1
  401108:	4605      	mov	r5, r0
  40110a:	4641      	mov	r1, r8
  40110c:	3001      	adds	r0, #1
  40110e:	ebac 0406 	sub.w	r4, ip, r6
  401112:	f000 f98d 	bl	401430 <strchr>
  401116:	4607      	mov	r7, r0
  401118:	b188      	cbz	r0, 40113e <strstr+0x86>
  40111a:	2c01      	cmp	r4, #1
  40111c:	d0f0      	beq.n	401100 <strstr+0x48>
  40111e:	1928      	adds	r0, r5, r4
  401120:	4287      	cmp	r7, r0
  401122:	bf94      	ite	ls
  401124:	1bc1      	subls	r1, r0, r7
  401126:	2101      	movhi	r1, #1
  401128:	2c1f      	cmp	r4, #31
  40112a:	468b      	mov	fp, r1
  40112c:	d90b      	bls.n	401146 <strstr+0x8e>
  40112e:	4623      	mov	r3, r4
  401130:	4632      	mov	r2, r6
  401132:	4638      	mov	r0, r7
  401134:	f7ff fec2 	bl	400ebc <two_way_long_needle>
  401138:	b005      	add	sp, #20
  40113a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40113e:	2000      	movs	r0, #0
  401140:	b005      	add	sp, #20
  401142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401146:	aa03      	add	r2, sp, #12
  401148:	4621      	mov	r1, r4
  40114a:	4630      	mov	r0, r6
  40114c:	f7ff fe5c 	bl	400e08 <critical_factorization>
  401150:	9903      	ldr	r1, [sp, #12]
  401152:	4680      	mov	r8, r0
  401154:	4602      	mov	r2, r0
  401156:	4431      	add	r1, r6
  401158:	4630      	mov	r0, r6
  40115a:	f000 f939 	bl	4013d0 <memcmp>
  40115e:	2800      	cmp	r0, #0
  401160:	d157      	bne.n	401212 <strstr+0x15a>
  401162:	f108 33ff 	add.w	r3, r8, #4294967295
  401166:	9300      	str	r3, [sp, #0]
  401168:	18f3      	adds	r3, r6, r3
  40116a:	4681      	mov	r9, r0
  40116c:	4605      	mov	r5, r0
  40116e:	9301      	str	r3, [sp, #4]
  401170:	4658      	mov	r0, fp
  401172:	46b2      	mov	sl, r6
  401174:	1966      	adds	r6, r4, r5
  401176:	1a32      	subs	r2, r6, r0
  401178:	2100      	movs	r1, #0
  40117a:	4438      	add	r0, r7
  40117c:	f000 f8d8 	bl	401330 <memchr>
  401180:	2800      	cmp	r0, #0
  401182:	d1dc      	bne.n	40113e <strstr+0x86>
  401184:	2e00      	cmp	r6, #0
  401186:	d0da      	beq.n	40113e <strstr+0x86>
  401188:	45c8      	cmp	r8, r9
  40118a:	4643      	mov	r3, r8
  40118c:	bf38      	it	cc
  40118e:	464b      	movcc	r3, r9
  401190:	429c      	cmp	r4, r3
  401192:	d912      	bls.n	4011ba <strstr+0x102>
  401194:	195a      	adds	r2, r3, r5
  401196:	f81a 1003 	ldrb.w	r1, [sl, r3]
  40119a:	5cb8      	ldrb	r0, [r7, r2]
  40119c:	4281      	cmp	r1, r0
  40119e:	443a      	add	r2, r7
  4011a0:	eb0a 0e03 	add.w	lr, sl, r3
  4011a4:	d006      	beq.n	4011b4 <strstr+0xfc>
  4011a6:	e02c      	b.n	401202 <strstr+0x14a>
  4011a8:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  4011ac:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  4011b0:	4288      	cmp	r0, r1
  4011b2:	d126      	bne.n	401202 <strstr+0x14a>
  4011b4:	3301      	adds	r3, #1
  4011b6:	429c      	cmp	r4, r3
  4011b8:	d1f6      	bne.n	4011a8 <strstr+0xf0>
  4011ba:	45c8      	cmp	r8, r9
  4011bc:	9900      	ldr	r1, [sp, #0]
  4011be:	f240 8083 	bls.w	4012c8 <strstr+0x210>
  4011c2:	9b00      	ldr	r3, [sp, #0]
  4011c4:	18ea      	adds	r2, r5, r3
  4011c6:	9b01      	ldr	r3, [sp, #4]
  4011c8:	5cb8      	ldrb	r0, [r7, r2]
  4011ca:	781b      	ldrb	r3, [r3, #0]
  4011cc:	4298      	cmp	r0, r3
  4011ce:	443a      	add	r2, r7
  4011d0:	d17a      	bne.n	4012c8 <strstr+0x210>
  4011d2:	9801      	ldr	r0, [sp, #4]
  4011d4:	f109 3bff 	add.w	fp, r9, #4294967295
  4011d8:	e006      	b.n	4011e8 <strstr+0x130>
  4011da:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  4011de:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  4011e2:	45f4      	cmp	ip, lr
  4011e4:	d103      	bne.n	4011ee <strstr+0x136>
  4011e6:	4619      	mov	r1, r3
  4011e8:	1e4b      	subs	r3, r1, #1
  4011ea:	455b      	cmp	r3, fp
  4011ec:	d1f5      	bne.n	4011da <strstr+0x122>
  4011ee:	f109 0901 	add.w	r9, r9, #1
  4011f2:	4589      	cmp	r9, r1
  4011f4:	d857      	bhi.n	4012a6 <strstr+0x1ee>
  4011f6:	9b03      	ldr	r3, [sp, #12]
  4011f8:	4630      	mov	r0, r6
  4011fa:	441d      	add	r5, r3
  4011fc:	eba4 0903 	sub.w	r9, r4, r3
  401200:	e7b8      	b.n	401174 <strstr+0xbc>
  401202:	f1c8 0201 	rsb	r2, r8, #1
  401206:	4415      	add	r5, r2
  401208:	441d      	add	r5, r3
  40120a:	f04f 0900 	mov.w	r9, #0
  40120e:	4630      	mov	r0, r6
  401210:	e7b0      	b.n	401174 <strstr+0xbc>
  401212:	eba4 0308 	sub.w	r3, r4, r8
  401216:	4543      	cmp	r3, r8
  401218:	bf38      	it	cc
  40121a:	4643      	movcc	r3, r8
  40121c:	3301      	adds	r3, #1
  40121e:	f108 39ff 	add.w	r9, r8, #4294967295
  401222:	9303      	str	r3, [sp, #12]
  401224:	eb06 0309 	add.w	r3, r6, r9
  401228:	4658      	mov	r0, fp
  40122a:	2500      	movs	r5, #0
  40122c:	46bb      	mov	fp, r7
  40122e:	469a      	mov	sl, r3
  401230:	1967      	adds	r7, r4, r5
  401232:	1a3a      	subs	r2, r7, r0
  401234:	2100      	movs	r1, #0
  401236:	4458      	add	r0, fp
  401238:	f000 f87a 	bl	401330 <memchr>
  40123c:	2800      	cmp	r0, #0
  40123e:	f47f af7e 	bne.w	40113e <strstr+0x86>
  401242:	2f00      	cmp	r7, #0
  401244:	f43f af7b 	beq.w	40113e <strstr+0x86>
  401248:	4544      	cmp	r4, r8
  40124a:	d915      	bls.n	401278 <strstr+0x1c0>
  40124c:	eb08 0205 	add.w	r2, r8, r5
  401250:	f816 3008 	ldrb.w	r3, [r6, r8]
  401254:	f81b 0002 	ldrb.w	r0, [fp, r2]
  401258:	4298      	cmp	r0, r3
  40125a:	445a      	add	r2, fp
  40125c:	eb06 0108 	add.w	r1, r6, r8
  401260:	4643      	mov	r3, r8
  401262:	d006      	beq.n	401272 <strstr+0x1ba>
  401264:	e023      	b.n	4012ae <strstr+0x1f6>
  401266:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  40126a:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  40126e:	4586      	cmp	lr, r0
  401270:	d11d      	bne.n	4012ae <strstr+0x1f6>
  401272:	3301      	adds	r3, #1
  401274:	429c      	cmp	r4, r3
  401276:	d1f6      	bne.n	401266 <strstr+0x1ae>
  401278:	f1b9 3fff 	cmp.w	r9, #4294967295
  40127c:	d012      	beq.n	4012a4 <strstr+0x1ec>
  40127e:	eb05 0209 	add.w	r2, r5, r9
  401282:	f89a 3000 	ldrb.w	r3, [sl]
  401286:	f81b 1002 	ldrb.w	r1, [fp, r2]
  40128a:	4299      	cmp	r1, r3
  40128c:	445a      	add	r2, fp
  40128e:	d114      	bne.n	4012ba <strstr+0x202>
  401290:	4653      	mov	r3, sl
  401292:	e005      	b.n	4012a0 <strstr+0x1e8>
  401294:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  401298:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  40129c:	4288      	cmp	r0, r1
  40129e:	d10c      	bne.n	4012ba <strstr+0x202>
  4012a0:	42b3      	cmp	r3, r6
  4012a2:	d1f7      	bne.n	401294 <strstr+0x1dc>
  4012a4:	465f      	mov	r7, fp
  4012a6:	1978      	adds	r0, r7, r5
  4012a8:	b005      	add	sp, #20
  4012aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4012ae:	f1c8 0201 	rsb	r2, r8, #1
  4012b2:	4415      	add	r5, r2
  4012b4:	441d      	add	r5, r3
  4012b6:	4638      	mov	r0, r7
  4012b8:	e7ba      	b.n	401230 <strstr+0x178>
  4012ba:	9b03      	ldr	r3, [sp, #12]
  4012bc:	4638      	mov	r0, r7
  4012be:	441d      	add	r5, r3
  4012c0:	e7b6      	b.n	401230 <strstr+0x178>
  4012c2:	780b      	ldrb	r3, [r1, #0]
  4012c4:	b913      	cbnz	r3, 4012cc <strstr+0x214>
  4012c6:	4770      	bx	lr
  4012c8:	4641      	mov	r1, r8
  4012ca:	e790      	b.n	4011ee <strstr+0x136>
  4012cc:	2000      	movs	r0, #0
  4012ce:	4770      	bx	lr

004012d0 <register_fini>:
  4012d0:	4b02      	ldr	r3, [pc, #8]	; (4012dc <register_fini+0xc>)
  4012d2:	b113      	cbz	r3, 4012da <register_fini+0xa>
  4012d4:	4802      	ldr	r0, [pc, #8]	; (4012e0 <register_fini+0x10>)
  4012d6:	f000 b805 	b.w	4012e4 <atexit>
  4012da:	4770      	bx	lr
  4012dc:	00000000 	.word	0x00000000
  4012e0:	004012f1 	.word	0x004012f1

004012e4 <atexit>:
  4012e4:	2300      	movs	r3, #0
  4012e6:	4601      	mov	r1, r0
  4012e8:	461a      	mov	r2, r3
  4012ea:	4618      	mov	r0, r3
  4012ec:	f000 b914 	b.w	401518 <__register_exitproc>

004012f0 <__libc_fini_array>:
  4012f0:	b538      	push	{r3, r4, r5, lr}
  4012f2:	4c0a      	ldr	r4, [pc, #40]	; (40131c <__libc_fini_array+0x2c>)
  4012f4:	4d0a      	ldr	r5, [pc, #40]	; (401320 <__libc_fini_array+0x30>)
  4012f6:	1b64      	subs	r4, r4, r5
  4012f8:	10a4      	asrs	r4, r4, #2
  4012fa:	d00a      	beq.n	401312 <__libc_fini_array+0x22>
  4012fc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  401300:	3b01      	subs	r3, #1
  401302:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  401306:	3c01      	subs	r4, #1
  401308:	f855 3904 	ldr.w	r3, [r5], #-4
  40130c:	4798      	blx	r3
  40130e:	2c00      	cmp	r4, #0
  401310:	d1f9      	bne.n	401306 <__libc_fini_array+0x16>
  401312:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401316:	f000 b98d 	b.w	401634 <_fini>
  40131a:	bf00      	nop
  40131c:	00401644 	.word	0x00401644
  401320:	00401640 	.word	0x00401640

00401324 <__retarget_lock_acquire_recursive>:
  401324:	4770      	bx	lr
  401326:	bf00      	nop

00401328 <__retarget_lock_release_recursive>:
  401328:	4770      	bx	lr
  40132a:	bf00      	nop
  40132c:	0000      	movs	r0, r0
	...

00401330 <memchr>:
  401330:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  401334:	2a10      	cmp	r2, #16
  401336:	db2b      	blt.n	401390 <memchr+0x60>
  401338:	f010 0f07 	tst.w	r0, #7
  40133c:	d008      	beq.n	401350 <memchr+0x20>
  40133e:	f810 3b01 	ldrb.w	r3, [r0], #1
  401342:	3a01      	subs	r2, #1
  401344:	428b      	cmp	r3, r1
  401346:	d02d      	beq.n	4013a4 <memchr+0x74>
  401348:	f010 0f07 	tst.w	r0, #7
  40134c:	b342      	cbz	r2, 4013a0 <memchr+0x70>
  40134e:	d1f6      	bne.n	40133e <memchr+0xe>
  401350:	b4f0      	push	{r4, r5, r6, r7}
  401352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  401356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40135a:	f022 0407 	bic.w	r4, r2, #7
  40135e:	f07f 0700 	mvns.w	r7, #0
  401362:	2300      	movs	r3, #0
  401364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  401368:	3c08      	subs	r4, #8
  40136a:	ea85 0501 	eor.w	r5, r5, r1
  40136e:	ea86 0601 	eor.w	r6, r6, r1
  401372:	fa85 f547 	uadd8	r5, r5, r7
  401376:	faa3 f587 	sel	r5, r3, r7
  40137a:	fa86 f647 	uadd8	r6, r6, r7
  40137e:	faa5 f687 	sel	r6, r5, r7
  401382:	b98e      	cbnz	r6, 4013a8 <memchr+0x78>
  401384:	d1ee      	bne.n	401364 <memchr+0x34>
  401386:	bcf0      	pop	{r4, r5, r6, r7}
  401388:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40138c:	f002 0207 	and.w	r2, r2, #7
  401390:	b132      	cbz	r2, 4013a0 <memchr+0x70>
  401392:	f810 3b01 	ldrb.w	r3, [r0], #1
  401396:	3a01      	subs	r2, #1
  401398:	ea83 0301 	eor.w	r3, r3, r1
  40139c:	b113      	cbz	r3, 4013a4 <memchr+0x74>
  40139e:	d1f8      	bne.n	401392 <memchr+0x62>
  4013a0:	2000      	movs	r0, #0
  4013a2:	4770      	bx	lr
  4013a4:	3801      	subs	r0, #1
  4013a6:	4770      	bx	lr
  4013a8:	2d00      	cmp	r5, #0
  4013aa:	bf06      	itte	eq
  4013ac:	4635      	moveq	r5, r6
  4013ae:	3803      	subeq	r0, #3
  4013b0:	3807      	subne	r0, #7
  4013b2:	f015 0f01 	tst.w	r5, #1
  4013b6:	d107      	bne.n	4013c8 <memchr+0x98>
  4013b8:	3001      	adds	r0, #1
  4013ba:	f415 7f80 	tst.w	r5, #256	; 0x100
  4013be:	bf02      	ittt	eq
  4013c0:	3001      	addeq	r0, #1
  4013c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4013c6:	3001      	addeq	r0, #1
  4013c8:	bcf0      	pop	{r4, r5, r6, r7}
  4013ca:	3801      	subs	r0, #1
  4013cc:	4770      	bx	lr
  4013ce:	bf00      	nop

004013d0 <memcmp>:
  4013d0:	2a03      	cmp	r2, #3
  4013d2:	b470      	push	{r4, r5, r6}
  4013d4:	d922      	bls.n	40141c <memcmp+0x4c>
  4013d6:	ea40 0301 	orr.w	r3, r0, r1
  4013da:	079b      	lsls	r3, r3, #30
  4013dc:	d011      	beq.n	401402 <memcmp+0x32>
  4013de:	7803      	ldrb	r3, [r0, #0]
  4013e0:	780c      	ldrb	r4, [r1, #0]
  4013e2:	42a3      	cmp	r3, r4
  4013e4:	d11d      	bne.n	401422 <memcmp+0x52>
  4013e6:	440a      	add	r2, r1
  4013e8:	3101      	adds	r1, #1
  4013ea:	e005      	b.n	4013f8 <memcmp+0x28>
  4013ec:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  4013f0:	f811 4b01 	ldrb.w	r4, [r1], #1
  4013f4:	42a3      	cmp	r3, r4
  4013f6:	d114      	bne.n	401422 <memcmp+0x52>
  4013f8:	4291      	cmp	r1, r2
  4013fa:	d1f7      	bne.n	4013ec <memcmp+0x1c>
  4013fc:	2000      	movs	r0, #0
  4013fe:	bc70      	pop	{r4, r5, r6}
  401400:	4770      	bx	lr
  401402:	680d      	ldr	r5, [r1, #0]
  401404:	6806      	ldr	r6, [r0, #0]
  401406:	42ae      	cmp	r6, r5
  401408:	460c      	mov	r4, r1
  40140a:	4603      	mov	r3, r0
  40140c:	f101 0104 	add.w	r1, r1, #4
  401410:	f100 0004 	add.w	r0, r0, #4
  401414:	d108      	bne.n	401428 <memcmp+0x58>
  401416:	3a04      	subs	r2, #4
  401418:	2a03      	cmp	r2, #3
  40141a:	d8f2      	bhi.n	401402 <memcmp+0x32>
  40141c:	2a00      	cmp	r2, #0
  40141e:	d1de      	bne.n	4013de <memcmp+0xe>
  401420:	e7ec      	b.n	4013fc <memcmp+0x2c>
  401422:	1b18      	subs	r0, r3, r4
  401424:	bc70      	pop	{r4, r5, r6}
  401426:	4770      	bx	lr
  401428:	4621      	mov	r1, r4
  40142a:	4618      	mov	r0, r3
  40142c:	e7d7      	b.n	4013de <memcmp+0xe>
  40142e:	bf00      	nop

00401430 <strchr>:
  401430:	b2c9      	uxtb	r1, r1
  401432:	2900      	cmp	r1, #0
  401434:	d041      	beq.n	4014ba <strchr+0x8a>
  401436:	0782      	lsls	r2, r0, #30
  401438:	b4f0      	push	{r4, r5, r6, r7}
  40143a:	d067      	beq.n	40150c <strchr+0xdc>
  40143c:	7803      	ldrb	r3, [r0, #0]
  40143e:	2b00      	cmp	r3, #0
  401440:	d068      	beq.n	401514 <strchr+0xe4>
  401442:	4299      	cmp	r1, r3
  401444:	d037      	beq.n	4014b6 <strchr+0x86>
  401446:	1c43      	adds	r3, r0, #1
  401448:	e004      	b.n	401454 <strchr+0x24>
  40144a:	f813 0b01 	ldrb.w	r0, [r3], #1
  40144e:	b390      	cbz	r0, 4014b6 <strchr+0x86>
  401450:	4281      	cmp	r1, r0
  401452:	d02f      	beq.n	4014b4 <strchr+0x84>
  401454:	079a      	lsls	r2, r3, #30
  401456:	461c      	mov	r4, r3
  401458:	d1f7      	bne.n	40144a <strchr+0x1a>
  40145a:	6825      	ldr	r5, [r4, #0]
  40145c:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
  401460:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
  401464:	ea83 0605 	eor.w	r6, r3, r5
  401468:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
  40146c:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  401470:	ea20 0006 	bic.w	r0, r0, r6
  401474:	ea22 0205 	bic.w	r2, r2, r5
  401478:	4302      	orrs	r2, r0
  40147a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40147e:	d111      	bne.n	4014a4 <strchr+0x74>
  401480:	4620      	mov	r0, r4
  401482:	f850 6f04 	ldr.w	r6, [r0, #4]!
  401486:	ea83 0706 	eor.w	r7, r3, r6
  40148a:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
  40148e:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
  401492:	ea25 0507 	bic.w	r5, r5, r7
  401496:	ea22 0206 	bic.w	r2, r2, r6
  40149a:	432a      	orrs	r2, r5
  40149c:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4014a0:	d0ef      	beq.n	401482 <strchr+0x52>
  4014a2:	4604      	mov	r4, r0
  4014a4:	7820      	ldrb	r0, [r4, #0]
  4014a6:	b918      	cbnz	r0, 4014b0 <strchr+0x80>
  4014a8:	e005      	b.n	4014b6 <strchr+0x86>
  4014aa:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  4014ae:	b110      	cbz	r0, 4014b6 <strchr+0x86>
  4014b0:	4281      	cmp	r1, r0
  4014b2:	d1fa      	bne.n	4014aa <strchr+0x7a>
  4014b4:	4620      	mov	r0, r4
  4014b6:	bcf0      	pop	{r4, r5, r6, r7}
  4014b8:	4770      	bx	lr
  4014ba:	0783      	lsls	r3, r0, #30
  4014bc:	d024      	beq.n	401508 <strchr+0xd8>
  4014be:	7803      	ldrb	r3, [r0, #0]
  4014c0:	2b00      	cmp	r3, #0
  4014c2:	d0f9      	beq.n	4014b8 <strchr+0x88>
  4014c4:	1c43      	adds	r3, r0, #1
  4014c6:	e003      	b.n	4014d0 <strchr+0xa0>
  4014c8:	7802      	ldrb	r2, [r0, #0]
  4014ca:	3301      	adds	r3, #1
  4014cc:	2a00      	cmp	r2, #0
  4014ce:	d0f3      	beq.n	4014b8 <strchr+0x88>
  4014d0:	0799      	lsls	r1, r3, #30
  4014d2:	4618      	mov	r0, r3
  4014d4:	d1f8      	bne.n	4014c8 <strchr+0x98>
  4014d6:	6819      	ldr	r1, [r3, #0]
  4014d8:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  4014dc:	ea22 0201 	bic.w	r2, r2, r1
  4014e0:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4014e4:	d108      	bne.n	4014f8 <strchr+0xc8>
  4014e6:	f853 1f04 	ldr.w	r1, [r3, #4]!
  4014ea:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  4014ee:	ea22 0201 	bic.w	r2, r2, r1
  4014f2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4014f6:	d0f6      	beq.n	4014e6 <strchr+0xb6>
  4014f8:	781a      	ldrb	r2, [r3, #0]
  4014fa:	4618      	mov	r0, r3
  4014fc:	b142      	cbz	r2, 401510 <strchr+0xe0>
  4014fe:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  401502:	2b00      	cmp	r3, #0
  401504:	d1fb      	bne.n	4014fe <strchr+0xce>
  401506:	4770      	bx	lr
  401508:	4603      	mov	r3, r0
  40150a:	e7e4      	b.n	4014d6 <strchr+0xa6>
  40150c:	4604      	mov	r4, r0
  40150e:	e7a4      	b.n	40145a <strchr+0x2a>
  401510:	4618      	mov	r0, r3
  401512:	4770      	bx	lr
  401514:	4618      	mov	r0, r3
  401516:	e7ce      	b.n	4014b6 <strchr+0x86>

00401518 <__register_exitproc>:
  401518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40151c:	4d2c      	ldr	r5, [pc, #176]	; (4015d0 <__register_exitproc+0xb8>)
  40151e:	4606      	mov	r6, r0
  401520:	6828      	ldr	r0, [r5, #0]
  401522:	4698      	mov	r8, r3
  401524:	460f      	mov	r7, r1
  401526:	4691      	mov	r9, r2
  401528:	f7ff fefc 	bl	401324 <__retarget_lock_acquire_recursive>
  40152c:	4b29      	ldr	r3, [pc, #164]	; (4015d4 <__register_exitproc+0xbc>)
  40152e:	681c      	ldr	r4, [r3, #0]
  401530:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  401534:	2b00      	cmp	r3, #0
  401536:	d03e      	beq.n	4015b6 <__register_exitproc+0x9e>
  401538:	685a      	ldr	r2, [r3, #4]
  40153a:	2a1f      	cmp	r2, #31
  40153c:	dc1c      	bgt.n	401578 <__register_exitproc+0x60>
  40153e:	f102 0e01 	add.w	lr, r2, #1
  401542:	b176      	cbz	r6, 401562 <__register_exitproc+0x4a>
  401544:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  401548:	2401      	movs	r4, #1
  40154a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40154e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  401552:	4094      	lsls	r4, r2
  401554:	4320      	orrs	r0, r4
  401556:	2e02      	cmp	r6, #2
  401558:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40155c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  401560:	d023      	beq.n	4015aa <__register_exitproc+0x92>
  401562:	3202      	adds	r2, #2
  401564:	f8c3 e004 	str.w	lr, [r3, #4]
  401568:	6828      	ldr	r0, [r5, #0]
  40156a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40156e:	f7ff fedb 	bl	401328 <__retarget_lock_release_recursive>
  401572:	2000      	movs	r0, #0
  401574:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401578:	4b17      	ldr	r3, [pc, #92]	; (4015d8 <__register_exitproc+0xc0>)
  40157a:	b30b      	cbz	r3, 4015c0 <__register_exitproc+0xa8>
  40157c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  401580:	f3af 8000 	nop.w
  401584:	4603      	mov	r3, r0
  401586:	b1d8      	cbz	r0, 4015c0 <__register_exitproc+0xa8>
  401588:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40158c:	6002      	str	r2, [r0, #0]
  40158e:	2100      	movs	r1, #0
  401590:	6041      	str	r1, [r0, #4]
  401592:	460a      	mov	r2, r1
  401594:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  401598:	f04f 0e01 	mov.w	lr, #1
  40159c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4015a0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4015a4:	2e00      	cmp	r6, #0
  4015a6:	d0dc      	beq.n	401562 <__register_exitproc+0x4a>
  4015a8:	e7cc      	b.n	401544 <__register_exitproc+0x2c>
  4015aa:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4015ae:	430c      	orrs	r4, r1
  4015b0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4015b4:	e7d5      	b.n	401562 <__register_exitproc+0x4a>
  4015b6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4015ba:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4015be:	e7bb      	b.n	401538 <__register_exitproc+0x20>
  4015c0:	6828      	ldr	r0, [r5, #0]
  4015c2:	f7ff feb1 	bl	401328 <__retarget_lock_release_recursive>
  4015c6:	f04f 30ff 	mov.w	r0, #4294967295
  4015ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4015ce:	bf00      	nop
  4015d0:	20000430 	.word	0x20000430
  4015d4:	0040161c 	.word	0x0040161c
  4015d8:	00000000 	.word	0x00000000
  4015dc:	0001c200 	.word	0x0001c200
  4015e0:	000000c0 	.word	0x000000c0
  4015e4:	00000800 	.word	0x00000800
	...
  4015f4:	72617453 	.word	0x72617453
  4015f8:	72742074 	.word	0x72742074
  4015fc:	66736e61 	.word	0x66736e61
  401600:	00007265 	.word	0x00007265
  401604:	65696c43 	.word	0x65696c43
  401608:	6e20746e 	.word	0x6e20746e
  40160c:	6320746f 	.word	0x6320746f
  401610:	656e6e6f 	.word	0x656e6e6f
  401614:	64657463 	.word	0x64657463
  401618:	00000000 	.word	0x00000000

0040161c <_global_impure_ptr>:
  40161c:	20000008                                ... 

00401620 <_init>:
  401620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401622:	bf00      	nop
  401624:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401626:	bc08      	pop	{r3}
  401628:	469e      	mov	lr, r3
  40162a:	4770      	bx	lr

0040162c <__init_array_start>:
  40162c:	004012d1 	.word	0x004012d1

00401630 <__frame_dummy_init_array_entry>:
  401630:	004000f1                                ..@.

00401634 <_fini>:
  401634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401636:	bf00      	nop
  401638:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40163a:	bc08      	pop	{r3}
  40163c:	469e      	mov	lr, r3
  40163e:	4770      	bx	lr

00401640 <__fini_array_start>:
  401640:	004000cd 	.word	0x004000cd
